{"version":3,"file":"static/js/408.48b338ee.chunk.js","mappings":"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","sources":["components/ReadArticle/ReadArticle.jsx","components/Author/Author.jsx","components/BlogCard/BlogCard.jsx","pages/Blogs/Blogs.jsx","../node_modules/@apollo/src/react/hooks/useSyncExternalStore.ts","../node_modules/@apollo/src/react/parser/index.ts","../node_modules/@apollo/src/react/hooks/useQuery.ts","../node_modules/@apollo/src/react/hooks/useApolloClient.ts"],"sourcesContent":["import React, { Component } from \"react\";\nimport \"./ReadArticle.scss\";\nimport { Link } from \"react-router-dom\";\nimport { ReactComponent as ArrowRight } from \"../../assets/images/arrow-right.svg\";\nexport default class ReadArticle extends Component {\n  render() {\n    return (\n      <Link className=\"read_article\" to={this.props.to}>\n        <span>Read Article</span>\n        <ArrowRight className=\"read_article__arrow\"/>\n      </Link>\n    );\n  }\n}\n","import React from \"react\";\nimport './Author.scss';\n\nexport default function Author(props) {\n  const author = props.author?.node;\n\n  return (\n    <div className=\"author\">\n      <div className=\"author__avatar\">\n        <img src={author?.avatar.url} alt=\"author avatar\" />\n      </div>\n      <div className=\"author_info\">\n        <h4 className=\"author__name\">{author?.firstName || author?.lastName ? `${author.firstName ? author.firstName : ''} ${author.lastName? author.lastName : ''}` : `@${author?.username}`}</h4>\n        <p className=\"author__occupation\">{author?.roles?.edges[0]?.node?.displayName}</p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReadArticle from \"../ReadArticle/ReadArticle\";\nimport \"./BlogCard.scss\";\n\nconst Blog = (props) => {\n  const blog = props.blog;\n  const authorImage = blog.author.node.avatar.url;\n  const authorName =\n    blog.author.node.firstName +\n    (blog.author.node.lastName ? \" \" + blog.author.node.lastName : \"\");\n\n  const firstParagraph = blog.content.split(\"</p>\")[0].split(\"<p>\")[1];\n  return (\n    <div className={`post ${props.className}`}>\n      <img\n        className=\"post__image\"\n        src={blog.featuredImage.node.sourceUrl}\n        alt=\"blog sample\"\n      />\n      <div className=\"post__category-box\">\n        <p className=\"post__name section_name post__name--blue\">\n          {blog.categories.edges[0].node.name || \"Story\"}\n        </p>\n        <p className=\"post__date\">\n          {new Intl.DateTimeFormat(\"en-US\", {\n            month: \"short\",\n            year: \"numeric\",\n            day: \"2-digit\",\n          }).format(new Date(blog.date))}\n        </p>\n      </div>\n      <h2 className=\"post__title\">{blog.title}</h2>\n\n      <p\n        className=\"post__summary\"\n        dangerouslySetInnerHTML={{ __html: firstParagraph }}\n      ></p>\n\n      <div className=\"post__author\">\n        <img\n          className=\"post__author-image\"\n          src={authorImage}\n          alt={authorName}\n        />\n        <p className=\"post__author-name\">{authorName}</p>\n      </div>\n      <ReadArticle />\n    </div>\n  );\n};\n\nexport default Blog;\n","import React, { Component, Fragment, Suspense } from \"react\";\nimport \"./Blogs.scss\";\nimport ReadArticle from \"../../components/ReadArticle/ReadArticle\";\nimport SectionTriangleRight from \"../../components/SectionTriangleRight/SectionTriangleRight\";\nimport Author from \"../../components/Author/Author\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_CATEGORIES, GET_POSTS } from \"../../lib/graphqlQuery\";\nimport client from \"../../configurations/apollo\";\nimport Button from \"../../components/Button/Button\";\nimport BlogCard from \"../../components/BlogCard/BlogCard\";\n\nexport default class Blogs extends Component {\n  blogs = { chip: \"all\", categories: [] };\n\n  constructor(props) {\n    super(props);\n\n    this.state = this.blogs;\n    this.handleRadioChange = this.handleRadioChange.bind(this);\n  }\n\n  async componentDidMount() {\n    // this.handleResize();\n    // window.addEventListener(\"resize\", this.handleResize);\n    await this.getCategories();\n  }\n\n  componentWillUnmount() {\n    // window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  // handleResize() {\n  //   const heroBlog = document.querySelector(\".hero_blog\");\n  //   const heroBlogWrapper = document.querySelector(\".hero_blog__wrapper\");\n\n  //   heroBlog.style.height =\n  //     parseInt(window.getComputedStyle(heroBlogWrapper).height.split(\"px\")) -\n  //     92 +\n  //     \"px\";\n  // }\n\n  handleRadioChange(event) {\n    this.blogs.chip = event.target.id;\n    this.setState(this.blogs);\n  }\n\n  async getCategories() {\n    const categories = await client.query({ query: GET_CATEGORIES });\n    this.blogs.categories = categories.data.categories.edges;\n    this.setState(this.blogs);\n  }\n\n  render() {\n    return (\n      <Suspense>\n        <main className=\"blogs\">\n          <section className=\"hero\" background=\"light\">\n            <div className=\"container\">\n              <div className=\"hero_blog\">\n                <div className=\"hero_blog__wrapper\">\n                  <HeroBlogInfo />\n                </div>\n                <div className=\"hero_graphic\"></div>\n              </div>\n            </div>\n            <SectionTriangleRight variant=\"white\" />\n          </section>\n\n          <section className=\"posts\">\n            <div className=\"container\">\n              <div className=\"chips\">\n                {this.state.categories.map(\n                  (category, index) =>\n                    category.node.name.toLowerCase() !== \"uncategorised\" && (\n                      <div className=\"chip\" key={index}>\n                        <input\n                          id={category.node.name}\n                          type=\"radio\"\n                          name=\"radio\"\n                          onChange={this.handleRadioChange}\n                          checked={\n                            this.state.chip.toLowerCase() ===\n                            category.node.name.toLowerCase()\n                          }\n                        />\n                        <label htmlFor={category.node.name}>\n                          {category.node.name}\n                        </label>\n                      </div>\n                    )\n                )}\n              </div>\n\n              <BlogsView chip={this.state.chip} />\n            </div>\n            <SectionTriangleRight variant=\"footer\" />\n          </section>\n        </main>\n      </Suspense>\n    );\n  }\n}\n\nconst HeroBlogInfo = () => {\n  const { loading, error, data } = useQuery(GET_POSTS, {\n    variables: { first: 1, after: null },\n    fetchPolicy: \"no-cache\",\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ErrorL {error}</p>;\n\n  const blog = data.posts.edges[0].node;\n\n  // Get the first paragraph of the blog\n  const firstParagraph = blog.content.split(\"</p>\")[0].split(\"<p>\")[1];\n\n  return (\n    <Fragment>\n      <div className=\"hero_blog__image\">\n        <img src={blog.featuredImage.node.sourceUrl} alt=\"blog hero\" />\n      </div>\n      <div className=\"hero_blog__content\">\n        <div className=\"hero_blog__content-box\">\n          <p className=\"section_name hero_blog__name\">BLOG TODAYS</p>\n          <h1 className=\"hero_blog__title\">{blog.title}</h1>\n          <p\n            className=\"hero_blog__summary\"\n            dangerouslySetInnerHTML={{\n              __html: firstParagraph,\n            }}\n          ></p>\n          <ReadArticle id={blog.id} />\n        </div>\n\n        <Author author={blog.author} />\n      </div>\n    </Fragment>\n  );\n};\n\nconst BlogsView = (props) => {\n  const batchSize = 8;\n  // get the first post to get the cursor for the first batch of posts\n  const { data: firstPost } = useQuery(GET_POSTS, {\n    variables: {\n      first: 1,\n    },\n  });\n\n  // get the rest of the posts\n  const { loading, error, data, fetchMore } = useQuery(GET_POSTS, {\n    variables: {\n      first: batchSize,\n      after: firstPost?.posts?.pageInfo.endCursor,\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  if (!data && loading) return <p>Loading...</p>;\n\n  if (error) return <p>An error occured</p>;\n\n  if (!data) {\n    return <p>No posts yet</p>;\n  }\n\n  // show only posts that have the selected category\n  let posts = data.posts.edges.map((edge) => edge.node);\n  const postInfo = data.posts.pageInfo;\n\n  if (props.chip.toLowerCase() !== \"all\") {\n    // set posts to only posts that have the selected category\n    posts = posts.filter((post) => {\n      const categories = post.categories.edges.map((edge) => edge.node.name);\n      return categories.includes(props.chip);\n    });\n  }\n\n  return (\n    <Fragment>\n      <div className=\"posts_view\">\n        {posts.map((post, index) => (\n          <BlogCard key={index} blog={post} />\n        ))}\n      </div>\n      <div className=\"view_more\">\n        {postInfo.hasNextPage ? (\n          <Button\n            text={loading ? \"Loading...\" : \"View all posts\"}\n            type=\"arrow outline\"\n            arrowVariant=\"down\"\n            color=\"green\"\n            disabled={loading}\n            onClick={(e) => {\n              e.preventDefault();\n              fetchMore({\n                variables: {\n                  first: batchSize,\n                  after: data.posts.pageInfo.endCursor,\n                },\n                updateQuery: (prev, { fetchMoreResult }) => {\n                  if (!fetchMoreResult) return prev;\n                  return {\n                    ...prev,\n                    posts: {\n                      ...prev.posts,\n                      ...fetchMoreResult.posts,\n                      edges: [\n                        ...prev.posts.edges,\n                        ...fetchMoreResult.posts.edges,\n                      ],\n                    },\n                  };\n                },\n              });\n            }}\n          />\n        ) : (\n          <p>All posts loaded.</p>\n        )}\n      </div>\n    </Fragment>\n  );\n};\n","import { invariant } from '../../utilities/globals';\nimport * as React from 'react';\n\nimport { canUseLayoutEffect } from '../../utilities';\n\nlet didWarnUncachedGetSnapshot = false;\n\ntype RealUseSESHookType =\n  // This import depends only on the @types/use-sync-external-store package, not\n  // the actual use-sync-external-store package, which is not installed. It\n  // might be nice to get this type from React 18, but it still needs to work\n  // when only React 17 or earlier is installed.\n  typeof import(\"use-sync-external-store\").useSyncExternalStore;\n\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nconst uSESKey = \"useSyncExternalStore\" as keyof typeof React;\nconst realHook = React[uSESKey] as RealUseSESHookType | undefined;\n\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nexport const useSyncExternalStore: RealUseSESHookType = realHook || ((\n  subscribe,\n  getSnapshot,\n  getServerSnapshot,\n) => {\n  // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n  const value = getSnapshot();\n  if (\n    // DEVIATION: Using our own __DEV__ polyfill (from ../../utilities/globals).\n    __DEV__ &&\n    !didWarnUncachedGetSnapshot &&\n    // DEVIATION: Not using Object.is because we know our snapshots will never\n    // be exotic primitive values like NaN, which is !== itself.\n    value !== getSnapshot()\n  ) {\n    didWarnUncachedGetSnapshot = true;\n    // DEVIATION: Using invariant.error instead of console.error directly.\n    invariant.error(\n      'The result of getSnapshot should be cached to avoid an infinite loop',\n    );\n  }\n\n  // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n  const [{inst}, forceUpdate] = React.useState({inst: {value, getSnapshot}});\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  if (canUseLayoutEffect) {\n    // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n    // which may seem like a conditional hook, but this code ends up behaving\n    // unconditionally (one way or the other) because canUseLayoutEffect is\n    // constant.\n    React.useLayoutEffect(() => {\n      Object.assign(inst, { value, getSnapshot });\n      // Whenever getSnapshot or subscribe changes, we need to check in the\n      // commit phase if there was an interleaved mutation. In concurrent mode\n      // this can happen all the time, but even in synchronous mode, an earlier\n      // effect may have mutated the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({inst});\n      }\n    }, [subscribe, value, getSnapshot]);\n  } else {\n    Object.assign(inst, { value, getSnapshot });\n  }\n\n  React.useEffect(() => {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({inst});\n    }\n\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(function handleStoreChange() {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({inst});\n      }\n    });\n  }, [subscribe]);\n\n  return value;\n});\n\nfunction checkIfSnapshotChanged<Snapshot>({\n  value,\n  getSnapshot,\n}: {\n  value: Snapshot;\n  getSnapshot: () => Snapshot;\n}): boolean {\n  try {\n    return value !== getSnapshot();\n  } catch {\n    return true;\n  }\n}\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments: DefinitionNode[] = []\n  const queries: DefinitionNode[] = []\n  const mutations: DefinitionNode[] = []\n  const subscriptions: DefinitionNode[] = []\n\n  for (const x of document.definitions) {\n    if (x.kind === 'FragmentDefinition') {\n      fragments.push(x);\n      continue\n    }\n\n    if (x.kind === 'OperationDefinition') {\n      switch (x.operation) {\n        case 'query':\n          queries.push(x);\n          break;\n        case 'mutation':\n          mutations.push(x);\n          break;\n        case 'subscription':\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  useCallback,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useSyncExternalStore } from './useSyncExternalStore';\nimport { equal } from '@wry/equality';\n\nimport { mergeOptions, OperationVariables, WatchQueryFetchPolicy } from '../../core';\nimport { ApolloContextValue, getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloClient,\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n  ObservableQueryFields,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\nimport { canUseWeakMap, canUseWeakSet, compact, isNonEmptyArray, maybeDeepFreeze } from '../../utilities';\n\nconst {\n  prototype: {\n    hasOwnProperty,\n  },\n} = Object;\n\nexport function useQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = Object.create(null),\n): QueryResult<TData, TVariables> {\n  return useInternalState(\n    useApolloClient(options.client),\n    query,\n  ).useQuery(options);\n}\n\nexport function useInternalState<TData, TVariables extends OperationVariables>(\n  client: ApolloClient<any>,\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n): InternalState<TData, TVariables> {\n  const stateRef = useRef<InternalState<TData, TVariables>>();\n  if (\n    !stateRef.current ||\n    client !== stateRef.current.client ||\n    query !== stateRef.current.query\n  ) {\n    stateRef.current = new InternalState(client, query, stateRef.current);\n  }\n  const state = stateRef.current;\n\n  // By default, InternalState.prototype.forceUpdate is an empty function, but\n  // we replace it here (before anyone has had a chance to see this state yet)\n  // with a function that unconditionally forces an update, using the latest\n  // setTick function. Updating this state by calling state.forceUpdate is the\n  // only way we trigger React component updates (no other useState calls within\n  // the InternalState class).\n  const [_tick, setTick] = useState(0);\n  state.forceUpdate = () => {\n    setTick(tick => tick + 1);\n  };\n\n  return state;\n}\n\nclass InternalState<TData, TVariables extends OperationVariables> {\n  constructor(\n    public readonly client: ReturnType<typeof useApolloClient>,\n    public readonly query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    previous?: InternalState<TData, TVariables>,\n  ) {\n    verifyDocumentType(query, DocumentType.Query);\n\n    // Reuse previousData from previous InternalState (if any) to provide\n    // continuity of previousData even if/when the query or client changes.\n    const previousResult = previous && previous.result;\n    const previousData = previousResult && previousResult.data;\n    if (previousData) {\n      this.previousData = previousData;\n    }\n  }\n\n  forceUpdate() {\n    // Replaced (in useInternalState) with a method that triggers an update.\n    invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n  }\n\n  asyncUpdate(signal: AbortSignal) {\n    return new Promise<QueryResult<TData, TVariables>>((resolve, reject) => {\n      const watchQueryOptions = this.watchQueryOptions;\n\n      const handleAborted = () => {\n        this.asyncResolveFns.delete(resolve)\n        this.optionsToIgnoreOnce.delete(watchQueryOptions);\n        signal.removeEventListener('abort', handleAborted)\n        reject(signal.reason);\n      };\n\n      this.asyncResolveFns.add(resolve);\n      this.optionsToIgnoreOnce.add(watchQueryOptions);\n      signal.addEventListener('abort', handleAborted)\n      this.forceUpdate();\n    });\n  }\n\n  private asyncResolveFns = new Set<\n    (result: QueryResult<TData, TVariables>) => void\n  >();\n\n  private optionsToIgnoreOnce = new (canUseWeakSet ? WeakSet : Set)<\n    WatchQueryOptions<TVariables, TData>\n  >();\n\n  // Methods beginning with use- should be called according to the standard\n  // rules of React hooks: only at the top level of the calling function, and\n  // without any dynamic conditional logic.\n  useQuery(options: QueryHookOptions<TData, TVariables>) {\n    // The renderPromises field gets initialized here in the useQuery method, at\n    // the beginning of everything (for a given component rendering, at least),\n    // so we can safely use this.renderPromises in other/later InternalState\n    // methods without worrying it might be uninitialized. Even after\n    // initialization, this.renderPromises is usually undefined (unless SSR is\n    // happening), but that's fine as long as it has been initialized that way,\n    // rather than left uninitialized.\n    this.renderPromises = useContext(getApolloContext()).renderPromises;\n\n    this.useOptions(options);\n\n    const obsQuery = this.useObservableQuery();\n\n    const result = useSyncExternalStore(\n      useCallback(() => {\n        if (this.renderPromises) {\n          return () => {};\n        }\n\n        const onNext = () => {\n          const previousResult = this.result;\n          // We use `getCurrentResult()` instead of the onNext argument because\n          // the values differ slightly. Specifically, loading results will have\n          // an empty object for data instead of `undefined` for some reason.\n          const result = obsQuery.getCurrentResult();\n          // Make sure we're not attempting to re-render similar results\n          if (\n            previousResult &&\n            previousResult.loading === result.loading &&\n            previousResult.networkStatus === result.networkStatus &&\n            equal(previousResult.data, result.data)\n          ) {\n            return;\n          }\n\n          this.setResult(result);\n        };\n\n        const onError = (error: Error) => {\n          const last = obsQuery[\"last\"];\n          subscription.unsubscribe();\n          // Unfortunately, if `lastError` is set in the current\n          // `observableQuery` when the subscription is re-created,\n          // the subscription will immediately receive the error, which will\n          // cause it to terminate again. To avoid this, we first clear\n          // the last error/result from the `observableQuery` before re-starting\n          // the subscription, and restore it afterwards (so the subscription\n          // has a chance to stay open).\n          try {\n            obsQuery.resetLastResults();\n            subscription = obsQuery.subscribe(onNext, onError);\n          } finally {\n            obsQuery[\"last\"] = last;\n          }\n\n          if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n            // The error is not a GraphQL error\n            throw error;\n          }\n\n          const previousResult = this.result;\n          if (\n            !previousResult ||\n            (previousResult && previousResult.loading) ||\n            !equal(error, previousResult.error)\n          ) {\n            this.setResult({\n              data: (previousResult && previousResult.data) as TData,\n              error: error as ApolloError,\n              loading: false,\n              networkStatus: NetworkStatus.error,\n            });\n          }\n        };\n\n        let subscription = obsQuery.subscribe(onNext, onError);\n\n        return () => subscription.unsubscribe();\n      }, [\n        // We memoize the subscribe function using useCallback and the following\n        // dependency keys, because the subscribe function reference is all that\n        // useSyncExternalStore uses internally as a dependency key for the\n        // useEffect ultimately responsible for the subscription, so we are\n        // effectively passing this dependency array to that useEffect buried\n        // inside useSyncExternalStore, as desired.\n        obsQuery,\n        this.renderPromises,\n        this.client.disableNetworkFetches,\n      ]),\n\n      () => this.getCurrentResult(),\n      () => this.getCurrentResult(),\n    );\n\n    // TODO Remove this method when we remove support for options.partialRefetch.\n    this.unsafeHandlePartialRefetch(result);\n\n    const queryResult = this.toQueryResult(result);\n\n    if (!queryResult.loading && this.asyncResolveFns.size) {\n      this.asyncResolveFns.forEach(resolve => resolve(queryResult));\n      this.asyncResolveFns.clear();\n    }\n\n    return queryResult;\n  }\n\n  // These members (except for renderPromises) are all populated by the\n  // useOptions method, which is called unconditionally at the beginning of the\n  // useQuery method, so we can safely use these members in other/later methods\n  // without worrying they might be uninitialized.\n  private renderPromises: ApolloContextValue[\"renderPromises\"];\n  private queryHookOptions: QueryHookOptions<TData, TVariables>;\n  private watchQueryOptions: WatchQueryOptions<TVariables, TData>;\n\n  private useOptions(\n    options: QueryHookOptions<TData, TVariables>,\n  ) {\n    const watchQueryOptions = this.createWatchQueryOptions(\n      this.queryHookOptions = options,\n    );\n\n    // Update this.watchQueryOptions, but only when they have changed, which\n    // allows us to depend on the referential stability of\n    // this.watchQueryOptions elsewhere.\n    const currentWatchQueryOptions = this.watchQueryOptions;\n\n    // To force this equality test to \"fail,\" thereby reliably triggering\n    // observable.reobserve, add any current WatchQueryOptions object(s) you\n    // want to be ignored to this.optionsToIgnoreOnce. A similar effect could be\n    // achieved by nullifying this.watchQueryOptions so the equality test\n    // immediately fails because currentWatchQueryOptions is null, but this way\n    // we can promise a truthy this.watchQueryOptions at all times.\n    if (\n      this.optionsToIgnoreOnce.has(currentWatchQueryOptions) ||\n      !equal(watchQueryOptions, currentWatchQueryOptions)\n    ) {\n      this.watchQueryOptions = watchQueryOptions;\n\n      if (currentWatchQueryOptions && this.observable) {\n        // As advertised in the -Once of this.optionsToIgnoreOnce, this trick is\n        // only good for one forced execution of observable.reobserve per\n        // ignored WatchQueryOptions object, though it is unlikely we will ever\n        // see this exact currentWatchQueryOptions object again here, since we\n        // just replaced this.watchQueryOptions with watchQueryOptions.\n        this.optionsToIgnoreOnce.delete(currentWatchQueryOptions);\n\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        this.observable.reobserve(this.getObsQueryOptions());\n\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        this.previousData = this.result?.data || this.previousData;\n        this.result = void 0;\n      }\n    }\n\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n\n    if (\n      (this.renderPromises || this.client.disableNetworkFetches) &&\n      this.queryHookOptions.ssr === false &&\n      !this.queryHookOptions.skip\n    ) {\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      this.result = this.ssrDisabledResult;\n    } else if (\n      this.queryHookOptions.skip ||\n      this.watchQueryOptions.fetchPolicy === 'standby'\n    ) {\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      this.result = this.skipStandbyResult;\n    } else if (\n      this.result === this.ssrDisabledResult ||\n      this.result === this.skipStandbyResult\n    ) {\n      this.result = void 0;\n    }\n  }\n\n  private getObsQueryOptions(): WatchQueryOptions<TVariables, TData> {\n    const toMerge: Array<\n      Partial<WatchQueryOptions<TVariables, TData>>\n    > = [];\n\n    const globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n\n    if (this.queryHookOptions.defaultOptions) {\n      toMerge.push(this.queryHookOptions.defaultOptions);\n    }\n\n    // We use compact rather than mergeOptions for this part of the merge,\n    // because we want watchQueryOptions.variables (if defined) to replace\n    // this.observable.options.variables whole. This replacement allows\n    // removing variables by removing them from the variables input to\n    // useQuery. If the variables were always merged together (rather than\n    // replaced), there would be no way to remove existing variables.\n    // However, the variables from options.defaultOptions and globalDefaults\n    // (if provided) should be merged, to ensure individual defaulted\n    // variables always have values, if not otherwise defined in\n    // observable.options or watchQueryOptions.\n    toMerge.push(compact(\n      this.observable && this.observable.options,\n      this.watchQueryOptions,\n    ));\n\n    return toMerge.reduce(\n      mergeOptions\n    ) as WatchQueryOptions<TVariables, TData>;\n  }\n\n  private ssrDisabledResult = maybeDeepFreeze({\n    loading: true,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.loading,\n  });\n\n  private skipStandbyResult = maybeDeepFreeze({\n    loading: false,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.ready,\n  });\n\n  // A function to massage options before passing them to ObservableQuery.\n  private createWatchQueryOptions({\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    ...otherOptions\n  }: QueryHookOptions<TData, TVariables> = {}): WatchQueryOptions<TVariables, TData> {\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    const watchQueryOptions: WatchQueryOptions<TVariables, TData> =\n      Object.assign(otherOptions, { query: this.query });\n\n    if (\n      this.renderPromises &&\n      (\n        watchQueryOptions.fetchPolicy === 'network-only' ||\n        watchQueryOptions.fetchPolicy === 'cache-and-network'\n      )\n    ) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {} as TVariables;\n    }\n\n    if (skip) {\n      const {\n        fetchPolicy = this.getDefaultFetchPolicy(),\n        initialFetchPolicy = fetchPolicy,\n      } = watchQueryOptions;\n\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy,\n        fetchPolicy: 'standby',\n      });\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy =\n        this.observable?.options.initialFetchPolicy ||\n        this.getDefaultFetchPolicy();\n    }\n\n    return watchQueryOptions;\n  }\n\n  getDefaultFetchPolicy(): WatchQueryFetchPolicy {\n    return (\n      this.queryHookOptions.defaultOptions?.fetchPolicy ||\n      this.client.defaultOptions.watchQuery?.fetchPolicy ||\n      \"cache-first\"\n    );\n  }\n\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  private onCompleted(data: TData) {}\n  private onError(error: ApolloError) {}\n\n  private observable: ObservableQuery<TData, TVariables>;\n  private obsQueryFields: Omit<\n    ObservableQueryFields<TData, TVariables>,\n    \"variables\"\n  >;\n\n  private useObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    const obsQuery = this.observable =\n      this.renderPromises\n        && this.renderPromises.getSSRObservable(this.watchQueryOptions)\n        || this.observable // Reuse this.observable if possible (and not SSR)\n        || this.client.watchQuery(this.getObsQueryOptions());\n\n    this.obsQueryFields = useMemo(() => ({\n      refetch: obsQuery.refetch.bind(obsQuery),\n      reobserve: obsQuery.reobserve.bind(obsQuery),\n      fetchMore: obsQuery.fetchMore.bind(obsQuery),\n      updateQuery: obsQuery.updateQuery.bind(obsQuery),\n      startPolling: obsQuery.startPolling.bind(obsQuery),\n      stopPolling: obsQuery.stopPolling.bind(obsQuery),\n      subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n    }), [obsQuery]);\n\n    const ssrAllowed = !(\n      this.queryHookOptions.ssr === false ||\n      this.queryHookOptions.skip\n    );\n\n    if (this.renderPromises && ssrAllowed) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n\n      if (obsQuery.getCurrentResult().loading) {\n        // TODO: This is a legacy API which could probably be cleaned up\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n\n    return obsQuery;\n  }\n\n  // These members are populated by getCurrentResult and setResult, and it's\n  // okay/normal for them to be initially undefined.\n  private result: undefined | ApolloQueryResult<TData>;\n  private previousData: undefined | TData;\n\n  private setResult(nextResult: ApolloQueryResult<TData>) {\n    const previousResult = this.result;\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n    this.result = nextResult;\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult);\n  }\n\n  private handleErrorOrCompleted(result: ApolloQueryResult<TData>) {\n    if (!result.loading) {\n      const error = this.toApolloError(result);\n\n      // wait a tick in case we are in the middle of rendering a component\n      Promise.resolve().then(() => {\n        if (error) {\n          this.onError(error);\n        } else if (result.data) {\n          this.onCompleted(result.data);\n        }\n      }).catch(error => {\n        invariant.warn(error);\n      });\n    }\n  }\n\n  private toApolloError(result: ApolloQueryResult<TData>): ApolloError | undefined {\n    return isNonEmptyArray(result.errors)\n      ? new ApolloError({ graphQLErrors: result.errors })\n      : result.error\n  }\n\n  private getCurrentResult(): ApolloQueryResult<TData> {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!this.result) {\n      this.handleErrorOrCompleted(\n        this.result = this.observable.getCurrentResult()\n      );\n    }\n    return this.result;\n  }\n\n  // This cache allows the referential stability of this.result (as returned by\n  // getCurrentResult) to translate into referential stability of the resulting\n  // QueryResult object returned by toQueryResult.\n  private toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)<\n    ApolloQueryResult<TData>,\n    QueryResult<TData, TVariables>\n  >();\n\n  toQueryResult(\n    result: ApolloQueryResult<TData>,\n  ): QueryResult<TData, TVariables> {\n    let queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n\n    const { data, partial, ...resultWithoutPartial } = result;\n    this.toQueryResultCache.set(result, queryResult = {\n      data, // Ensure always defined, even if result.data is missing.\n      ...resultWithoutPartial,\n      ...this.obsQueryFields,\n      client: this.client,\n      observable: this.observable,\n      variables: this.observable.variables,\n      called: !this.queryHookOptions.skip,\n      previousData: this.previousData,\n    });\n\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      // TODO: Is it possible for both result.error and result.errors to be\n      // defined here?\n      queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n    }\n\n    return queryResult;\n  }\n\n  private unsafeHandlePartialRefetch(result: ApolloQueryResult<TData>) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      result.partial &&\n      this.queryHookOptions.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      this.observable.options.fetchPolicy !== 'cache-only'\n    ) {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      });\n      this.observable.refetch();\n    }\n  }\n}\n","import { invariant } from '../../utilities/globals';\nimport { useContext } from 'react';\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useApolloClient(\n  override?: ApolloClient<object>,\n): ApolloClient<object> {\n  const context = useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n    'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n    'instance in via options.',\n  );\n\n  return client;\n}\n"],"names":["ReadArticle","_Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_jsxs","Link","className","to","this","props","children","_jsx","ArrowRight","Component","Author","_props$author","_author$roles","_author$roles$edges$","_author$roles$edges$$","author","node","src","avatar","url","alt","firstName","lastName","concat","username","roles","edges","displayName","blog","authorImage","authorName","firstParagraph","content","split","featuredImage","sourceUrl","categories","name","Intl","DateTimeFormat","month","year","day","format","Date","date","title","dangerouslySetInnerHTML","__html","Blogs","_this","call","blogs","chip","state","handleRadioChange","bind","_assertThisInitialized","_componentDidMount","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","getCategories","stop","event","target","id","setState","_getCategories","_callee2","_context2","client","query","GET_CATEGORIES","sent","data","_this2","Suspense","background","HeroBlogInfo","SectionTriangleRight","variant","map","category","index","toLowerCase","type","onChange","checked","htmlFor","BlogsView","_useQuery","useQuery","GET_POSTS","variables","first","after","fetchPolicy","loading","error","posts","Fragment","_firstPost$posts","firstPost","_useQuery3","pageInfo","endCursor","notifyOnNetworkStatusChange","fetchMore","edge","postInfo","filter","post","includes","BlogCard","hasNextPage","Button","text","arrowVariant","color","disabled","onClick","e","preventDefault","updateQuery","_ref","fetchMoreResult","_objectSpread","_toConsumableArray","didWarnUncachedGetSnapshot","useSyncExternalStore","React","subscribe","getSnapshot","getServerSnapshot","__DEV__","invariant","_a","inst","forceUpdate","canUseLayoutEffect","Object","assign","checkIfSnapshotChanged","_b","DocumentType","cache","Map","operationName","Query","Mutation","Subscription","verifyDocumentType","document","operation","cached","get","kind","fragments","queries","mutations","subscriptions","_i","definitions","length","x","push","definition","variableDefinitions","payload","set","parser","requiredOperationName","usedOperationName","hasOwnProperty","prototype","options","create","stateRef","useRef","current","InternalState","useState","setTick","tick","useInternalState","override","context","useContext","getApolloContext","useApolloClient","previous","asyncResolveFns","Set","optionsToIgnoreOnce","canUseWeakSet","WeakSet","ssrDisabledResult","maybeDeepFreeze","networkStatus","NetworkStatus","skipStandbyResult","toQueryResultCache","canUseWeakMap","WeakMap","previousResult","result","previousData","asyncUpdate","signal","Promise","resolve","reject","watchQueryOptions","add","addEventListener","handleAborted","delete","removeEventListener","reason","renderPromises","useOptions","obsQuery","useObservableQuery","useCallback","onNext","getCurrentResult","equal","setResult","subscription","onError","last","unsubscribe","resetLastResults","disableNetworkFetches","unsafeHandlePartialRefetch","queryResult","toQueryResult","size","forEach","clear","createWatchQueryOptions","queryHookOptions","currentWatchQueryOptions","has","observable","reobserve","getObsQueryOptions","onCompleted","ssr","skip","toMerge","globalDefaults","defaultOptions","watchQuery","compact","reduce","mergeOptions","otherOptions","__rest","_c","getDefaultFetchPolicy","_d","initialFetchPolicy","getSSRObservable","obsQueryFields","useMemo","refetch","startPolling","stopPolling","subscribeToMore","ssrAllowed","registerSSRObservable","addObservableQueryPromise","nextResult","handleErrorOrCompleted","error_1","toApolloError","then","catch","isNonEmptyArray","errors","ApolloError","graphQLErrors","resultWithoutPartial","partial","__assign","called","partialRefetch","keys"],"sourceRoot":""}