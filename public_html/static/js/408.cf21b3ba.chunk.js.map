{"version":3,"file":"static/js/408.cf21b3ba.chunk.js","mappings":"2NAIqBA,EAAW,qGAQ7B,OAR6B,8BAC9B,WACE,OACE,UAAC,KAAI,CAACC,UAAU,eAAeC,GAAIC,KAAKC,MAAMF,GAAG,WAC/C,4CACA,SAAC,IAAU,CAACD,UAAU,0BAG5B,KAAC,EAR6B,CAASI,EAAAA,U,4ECD1B,SAASC,EAAcF,GACpC,IAAIH,EAAY,GAEhB,OAAQG,EAAMG,SACZ,IAAK,QACDN,EAAY,gCACZ,MACJ,IAAK,QACDA,EAAY,gCACZ,MACJ,IAAK,YACDA,EAAY,oCACZ,MACJ,IAAK,aACDA,EAAY,qCACZ,MACJ,IAAK,OACDA,EAAY,+BACZ,MACJ,IAAK,SACDA,EAAY,iCACZ,MACJ,IAAK,cACDA,EAAY,sCACZ,MACJ,QACIA,EAAY,GAGlB,OACE,gBACEA,UAAU,yBACVO,QAAQ,eACRC,MAAM,6BAA4B,UAElC,oBAASR,UAAWA,EAAWS,OAAO,0BAG5C,C,wMCtCe,SAASC,EAAOP,GAAQ,IAAD,QAC9BQ,EAAqB,QAAf,EAAGR,EAAMQ,cAAM,aAAZ,EAAcC,KAE7B,OACE,iBAAKZ,UAAU,SAAQ,WACrB,gBAAKA,UAAU,iBAAgB,UAC7B,gBAAKa,IAAW,OAANF,QAAM,IAANA,OAAM,EAANA,EAAQG,OAAOC,IAAKC,IAAI,qBAEpC,iBAAKhB,UAAU,cAAa,WAC1B,eAAIA,UAAU,eAAc,SAAQ,OAANW,QAAM,IAANA,GAAAA,EAAQM,WAAmB,OAANN,QAAM,IAANA,GAAAA,EAAQO,SAAQ,UAAMP,EAAOM,UAAYN,EAAOM,UAAY,GAAE,YAAIN,EAAOO,SAAUP,EAAOO,SAAW,IAAE,WAAe,OAANP,QAAM,IAANA,OAAM,EAANA,EAAQQ,aAC3K,cAAGnB,UAAU,qBAAoB,SAAQ,OAANW,QAAM,IAANA,GAAa,QAAP,EAANA,EAAQS,aAAK,OAAU,QAAV,EAAb,EAAeC,MAAM,UAAE,OAAM,QAAN,EAAvB,EAAyBT,YAAI,WAAvB,EAAN,EAA+BU,mBAI1E,C,4CCkCA,EA/Ca,SAACnB,GACZ,IAAMoB,EAAOpB,EAAMoB,KACbC,EAAcD,EAAKZ,OAAOC,KAAKE,OAAOC,IACtCU,EACJF,EAAKZ,OAAOC,KAAKK,WAChBM,EAAKZ,OAAOC,KAAKM,SAAW,IAAMK,EAAKZ,OAAOC,KAAKM,SAAW,IAE3DQ,EAAiBH,EAAKI,QAAQC,MAAM,QAAQ,GAAGA,MAAM,OAAO,GAClE,OACE,iBAAK5B,UAAS,eAAUG,EAAMH,WAAY,WACxC,gBACEA,UAAU,cACVa,IAAKU,EAAKM,cAAcjB,KAAKkB,UAC7Bd,IAAI,iBAEN,iBAAKhB,UAAU,qBAAoB,WACjC,cAAGA,UAAU,2CAA0C,SACpDuB,EAAKQ,WAAWV,MAAM,GAAGT,KAAKoB,MAAQ,WAEzC,cAAGhC,UAAU,aAAY,SACtB,IAAIiC,KAAKC,eAAe,QAAS,CAChCC,MAAO,QACPC,KAAM,UACNC,IAAK,YACJC,OAAO,IAAIC,KAAKhB,EAAKiB,aAG5B,eAAIxC,UAAU,cAAa,SAAEuB,EAAKkB,SAElC,cACEzC,UAAU,gBACV0C,wBAAyB,CAAEC,OAAQjB,MAGrC,iBAAK1B,UAAU,eAAc,WAC3B,gBACEA,UAAU,qBACVa,IAAKW,EACLR,IAAKS,KAEP,cAAGzB,UAAU,oBAAmB,SAAEyB,QAEpC,SAAC1B,EAAA,EAAW,MAGlB,ECtCqB6C,EAAK,0CAGxB,WAAYzC,GAAQ,IAAD,EAI0C,OAJ1C,gBACjB,cAAMA,IAHR0C,MAAQ,CAAEC,KAAM,MAAOf,WAAY,IAKjC,EAAKgB,MAAQ,EAAKF,MAClB,EAAKG,kBAAoB,EAAKA,kBAAkBC,MAAK,WAAM,CAC7D,CAiFC,OAjFA,kFAED,mGAGQ/C,KAAKgD,gBAAgB,KAAD,2CAC3B,kDANA,IAMA,kCAED,WACE,GAWF,+BAEA,SAAkBC,GAChBjD,KAAK2C,MAAMC,KAAOK,EAAMC,OAAOC,GAC/BnD,KAAKoD,SAASpD,KAAK2C,MACrB,GAAC,oEAED,yGAC2BU,EAAAA,EAAAA,MAAa,CAAEC,MAAOC,EAAAA,KAAkB,KAAD,EAA1D1B,EAAU,OAChB7B,KAAK2C,MAAMd,WAAaA,EAAW2B,KAAK3B,WAAWV,MACnDnB,KAAKoD,SAASpD,KAAK2C,OAAO,gDAC3B,kDANA,IAMA,oBAED,WAAU,IAAD,OACP,OACE,SAAC,EAAAc,SAAQ,WACP,kBAAM3D,UAAU,QAAO,WACrB,qBAASA,UAAU,OAAO4D,WAAW,QAAO,WAC1C,gBAAK5D,UAAU,YAAW,UACxB,iBAAKA,UAAU,YAAW,WACxB,gBAAKA,UAAU,qBAAoB,UACjC,SAAC6D,EAAY,OAEf,gBAAK7D,UAAU,uBAGnB,SAAC8D,EAAA,EAAoB,CAACxD,QAAQ,cAGhC,qBAASN,UAAU,QAAO,WACxB,iBAAKA,UAAU,YAAW,WACxB,gBAAKA,UAAU,QAAO,SACnBE,KAAK6C,MAAMhB,WAAWgC,KACrB,SAACC,EAAUC,GAAK,MACuB,kBAArCD,EAASpD,KAAKoB,KAAKkC,gBACjB,iBAAKlE,UAAU,OAAM,WACnB,kBACEqD,GAAIW,EAASpD,KAAKoB,KAClBmC,KAAK,QACLnC,KAAK,QACLoC,SAAU,EAAKpB,kBACfqB,QACE,EAAKtB,MAAMD,KAAKoB,gBAChBF,EAASpD,KAAKoB,KAAKkC,iBAGvB,kBAAOI,QAASN,EAASpD,KAAKoB,KAAK,SAChCgC,EAASpD,KAAKoB,SAZQiC,EAe5B,OAIP,SAACM,EAAS,CAACzB,KAAM5C,KAAK6C,MAAMD,WAE9B,SAACgB,EAAA,EAAoB,CAACxD,QAAQ,kBAKxC,KAAC,EAzFuB,CAASF,EAAAA,WA4F7ByD,EAAe,WACnB,OAAiCW,EAAAA,EAAAA,GAASC,EAAAA,GAAW,CACnDC,UAAW,CAAEC,MAAO,EAAGC,MAAO,MAC9BC,YAAa,aAFPC,EAAO,EAAPA,QAASC,EAAK,EAALA,MAAOrB,EAAI,EAAJA,KAKxB,GAAIoB,EAAS,OAAO,sCACpB,GAAIC,EAAO,OAAO,mCAAWA,KAE7B,IAAMxD,EAAOmC,EAAKsB,MAAM3D,MAAM,GAAGT,KAG3Bc,EAAiBH,EAAKI,QAAQC,MAAM,QAAQ,GAAGA,MAAM,OAAO,GAElE,OACE,UAAC,EAAAqD,SAAQ,YACP,gBAAKjF,UAAU,mBAAkB,UAC/B,gBAAKa,IAAKU,EAAKM,cAAcjB,KAAKkB,UAAWd,IAAI,iBAEnD,iBAAKhB,UAAU,qBAAoB,WACjC,iBAAKA,UAAU,yBAAwB,WACrC,cAAGA,UAAU,+BAA8B,0BAC3C,eAAIA,UAAU,mBAAkB,SAAEuB,EAAKkB,SACvC,cACEzC,UAAU,qBACV0C,wBAAyB,CACvBC,OAAQjB,MAGZ,SAAC3B,EAAA,EAAW,CAACsD,GAAI9B,EAAK8B,SAGxB,SAAC,EAAM,CAAC1C,OAAQY,EAAKZ,cAI7B,EAEM4D,EAAY,SAACpE,GAAW,IAAD,EAGb+E,GAAcV,EAAAA,EAAAA,GAASC,EAAAA,GAAW,CAC9CC,UAAW,CACTC,MAAO,KAFHjB,KAOR,GAA4Cc,EAAAA,EAAAA,GAASC,EAAAA,GAAW,CAC9DC,UAAW,CACTC,MAXc,EAYdC,MAAgB,OAATM,QAAS,IAATA,GAAgB,QAAP,EAATA,EAAWF,aAAK,WAAP,EAAT,EAAkBG,SAASC,WAEpCC,6BAA6B,IALvBP,EAAO,EAAPA,QAASC,EAAK,EAALA,MAAOrB,EAAI,EAAJA,KAAM4B,EAAS,EAATA,UAQ9B,IAAK5B,GAAQoB,EAAS,OAAO,sCAE7B,GAAIC,EAAO,OAAO,4CAElB,IAAKrB,EACH,OAAO,wCAIT,IAAIsB,EAAQtB,EAAKsB,MAAM3D,MAAM0C,KAAI,SAACwB,GAAI,OAAKA,EAAK3E,IAAI,IAC9C4E,EAAW9B,EAAKsB,MAAMG,SAU5B,MARiC,QAA7BhF,EAAM2C,KAAKoB,gBAEbc,EAAQA,EAAMS,QAAO,SAACC,GAEpB,OADmBA,EAAK3D,WAAWV,MAAM0C,KAAI,SAACwB,GAAI,OAAKA,EAAK3E,KAAKoB,IAAI,IACnD2D,SAASxF,EAAM2C,KACnC,MAIA,UAAC,EAAAmC,SAAQ,YACP,gBAAKjF,UAAU,aAAY,SACxBgF,EAAMjB,KAAI,SAAC2B,EAAMzB,GAAK,OACrB,SAAC,EAAQ,CAAa1C,KAAMmE,GAAbzB,EAAqB,OAGxC,gBAAKjE,UAAU,YAAW,SACvBwF,EAASI,aACR,SAACC,EAAA,EAAM,CACLC,KAAMhB,EAAU,aAAe,iBAC/BX,KAAK,gBACL4B,aAAa,OACbC,MAAM,QACNC,SAAUnB,EACVoB,QAAS,SAACC,GACRA,EAAEC,iBACFd,EAAU,CACRZ,UAAW,CACTC,MAxDE,EAyDFC,MAAOlB,EAAKsB,MAAMG,SAASC,WAE7BiB,YAAa,SAACC,EAAK,GAA0B,IAAvBC,EAAe,EAAfA,gBACpB,OAAKA,GACE,kBACFD,GAAI,IACPtB,OAAM,0BACDsB,EAAKtB,OACLuB,EAAgBvB,OAAK,IACxB3D,MAAM,GAAD,eACAiF,EAAKtB,MAAM3D,QAAK,OAChBkF,EAAgBvB,MAAM3D,YARFiF,CAY/B,GAEJ,KAGF,iDAKV,C,8GC3NIE,GAA6B,EAmBpBC,EANIC,EAAa,sBAMuC,SACnEC,EACAC,EACAC,GAMA,IAAMC,EAAQF,IAGZG,UACCP,GAGDM,IAAUF,MAEVJ,GAA6B,EAE7BO,SAAUC,EAAAA,GAAAA,MACR,yEAkBE,MAAwBN,EAAAA,SAAe,CAACO,KAAM,CAACH,MAAK,EAAEF,YAAW,KAA/DK,EAAI,UAAGC,EAAW,KAiD1B,OA5CIC,EAAAA,GAKFT,EAAAA,iBAAsB,WACpBU,OAAOC,OAAOJ,EAAM,CAAEH,MAAK,EAAEF,YAAW,IAKpCU,EAAuBL,IAEzBC,EAAY,CAACD,KAAI,GAErB,GAAG,CAACN,EAAWG,EAAOF,IAEtBQ,OAAOC,OAAOJ,EAAM,CAAEH,MAAK,EAAEF,YAAW,IAG1CF,EAAAA,WAAgB,WASd,OANIY,EAAuBL,IAEzBC,EAAY,CAACD,KAAI,IAIZN,GAAU,WAQXW,EAAuBL,IAEzBC,EAAY,CAACD,KAAI,GAErB,GACF,GAAG,CAACN,IAEGG,CACT,EAEA,SAASQ,EAAiCC,G,IACxCT,EAAK,QACLF,EAAW,cAKX,IACE,OAAOE,IAAUF,G,CACjB,SACA,OAAO,C,CAEX,C,ICtHYY,E,mDAAZ,SAAYA,GACVA,EAAAA,EAAAA,MAAAA,GAAAA,QACAA,EAAAA,EAAAA,SAAAA,GAAAA,WACAA,EAAAA,EAAAA,aAAAA,GAAAA,cACD,CAJD,CAAYA,IAAAA,EAAY,KAYxB,IAAMC,EAAQ,IAAIC,IAEZ,SAAUC,EAAcxD,GAC5B,IAAInC,EACJ,OAAQmC,GACN,KAAKqD,EAAaI,MAChB5F,EAAO,QACP,MACF,KAAKwF,EAAaK,SAChB7F,EAAO,WACP,MACF,KAAKwF,EAAaM,aAChB9F,EAAO,eAGX,OAAOA,CACT,CAwFE,SAAM+F,EAA2BC,EAAE,GACnC,IAAMC,EAtFF,SAAiBD,GACrB,IAGItD,EAAWP,EAHT+D,EAAST,EAAMU,IAAIH,GACzB,GAAIE,EAAQ,OAAOA,EAInBnB,SACEC,EAAAA,EAAAA,MAAU,KAAe,EACzB,oBAAe,OAAQ,gDAAvB,gHAGAA,EAAAA,EAAAA,MAAAA,KAAAA,EAAAA,KAAAA,IAOF,IALA,IAAMoB,EAA8B,GAC9BC,EAA4B,GAC5BC,EAA8B,GAC9BC,EAAkC,GAExB,IAAAhB,EAAAA,EAASiB,YAATC,EAAAA,EAAAA,OAAAA,IAAsB,CAAjC,IAAMC,EAAC,KACV,GAAe,uBAAXA,EAAEC,MAKN,GAAe,wBAAXD,EAAEC,KACJ,OAAQD,EAAET,WACR,IAAK,QACHI,EAAQO,KAAKF,GACb,MACF,IAAK,WACHJ,EAAUM,KAAKF,GACf,MACF,IAAK,eACHH,EAAcK,KAAKF,SAbvBN,EAAUQ,KAAKF,E,CAmBnB3B,SACEC,EAAAA,EAAAA,KAAWoB,EAAM,QACdC,EAAQQ,QAAUP,EAAUO,QAAUN,EAAcM,OACvD,0HAEA7B,EAAAA,EAAAA,KAAAA,EAAAA,QAEFqB,EACE,QAAQ,EAAS,QAAgBE,EAAG,OAAoB,I,SAEtD,QAAG,EAAQ,SAAeM,OAAON,EAAAA,QAAa,8EAC9C,qBAAqB,SAAgBM,OAAAA,cAAc,qBACnD,qDAGA,0EAA+D,0CACnE1E,EAAKkE,EAAQQ,OAAWrB,EAAU,MAAM,WAAE,EAAO,QAAac,EAAAA,SAExDnE,EAAAA,EAAc,c,IAClBqE,EAAS,SACPH,EAAAA,EACA,OACAC,EAGFC,E,SAEE,QAAqBM,IAAlBL,EAAkBK,OAAAA,sDAAgB,kBACrC,qCAGE,0EAAuD,yBAC7D,MAAY,EAAW,GAEvBnE,EAAIoE,EAAmBC,qBAAoB,GAO3C,MAAU,CAAA/G,KANR8G,EAAO,MAAsB,SAAXA,EAAW,UAC9B9G,EAAAA,KAAAA,MAEAA,OAG2BmC,KAAC,EAAAO,UAAAA,GAE9B,OADC+C,EAAAA,IAAO,EAAQ,GAChB,CAED,CAEQQ,CAAAA,GACAe,EAAoBrB,EAAc,GACxC,EACgBA,EACd,Q,SACE,QAAG,SAAqBxD,EAAAA,aAAW,SAAiB,wBAEzD,+E,kCCjGG,EAEAiD,OAAM,yBAEJ,SAAU5C,EAIdhB,EACAyF,GAEA,YAFA,IAAAA,IAAAA,EAA+C7B,OAAO8B,OAAO,OAQzD,SACJ3F,EACAC,GAEA,IAAM2F,GAAWC,EAAAA,EAAAA,UAEdD,EAASE,SACV9F,IAAW4F,EAASE,QAAQ9F,QAC5BC,IAAU2F,EAASE,QAAQ7F,QAE3B2F,EAASE,QAAU,IAAIC,EAAc/F,EAAQC,EAAO2F,EAASE,UAE/D,IAAMtG,EAAQoG,EAASE,QAQjB,GAAmBE,EAAAA,EAAAA,UAAS,GAApBC,GAAF,KAAS,MAKrB,OAJAzG,EAAMmE,YAAc,WAClBsC,GAAQ,SAAAC,GAAQ,OAAAA,EAAO,CAAP,GAClB,EAEO1G,CACT,CAhCS2G,CC1CH,SACJC,GAEA,IAAMC,GAAUC,EAAAA,EAAAA,aAAWC,EAAAA,EAAAA,MACrBvG,EAASoG,GAAYC,EAAQrG,OAQnC,OAPAwD,SACEC,EAAAA,EAAAA,MACA,yKAGAA,EAAAA,EAAAA,MAAAA,EAAAA,IAEKzD,CACT,CD8BIwG,CAAgBd,EAAQ1F,QACxBC,GACAgB,SAASyE,EACb,CA8BA,iBACE,WACkB1F,EACAC,EAChBwG,GAFgB,KAAAzG,OAAAA,EACA,KAAAC,MAAAA,EA2BV,KAAAyG,gBAAkB,IAAIC,IAItB,KAAAC,oBAAsB,IAAKC,EAAAA,GAAgBC,QAAUH,KAqPrD,KAAAI,mBAAoBC,EAAAA,EAAAA,GAAgB,CAC1CzF,SAAS,EACTpB,UAAM,EACNqB,WAAO,EACPyF,cAAeC,EAAAA,EAAAA,UAGT,KAAAC,mBAAoBH,EAAAA,EAAAA,GAAgB,CAC1CzF,SAAS,EACTpB,UAAM,EACNqB,WAAO,EACPyF,cAAeC,EAAAA,EAAAA,QAkKT,KAAAE,mBAAqB,IAAKC,EAAAA,GAAgBC,QAAUnD,KA9b1DK,EAAmBvE,EAAOgE,EAAaI,OAIvC,IAAMkD,EAAiBd,GAAYA,EAASe,OACtCC,EAAeF,GAAkBA,EAAepH,KAClDsH,IACF9K,KAAK8K,aAAeA,EAExB,CA2eF,OAzeE1B,EAAAA,UAAAA,YAAA,WAEEvC,SAAUC,EAAAA,GAAAA,KAAK,oEACjB,EAEAsC,EAAAA,UAAAA,YAAA,sBACE,OAAO,IAAI2B,SAAwC,SAAAC,GACjDC,EAAKlB,gBAAgBmB,IAAIF,GACzBC,EAAKhB,oBAAoBiB,IAAID,EAAKE,mBAClCF,EAAKjE,aACP,GACF,EAaAoC,EAAAA,UAAAA,SAAA,SAASL,GAAT,WAQE/I,KAAKoL,gBAAiBzB,EAAAA,EAAAA,aAAWC,EAAAA,EAAAA,MAAoBwB,eAErDpL,KAAKqL,WAAWtC,GAEhB,IAAMuC,EAAWtL,KAAKuL,qBAEhBV,EAAStE,GACbiF,EAAAA,EAAAA,cAAY,WACV,GAAIP,EAAKG,eACP,OAAO,WAAO,EAGhB,IAAMK,EAAS,WACb,IAAMb,EAAiBK,EAAKJ,OAItBA,EAASS,EAASI,mBAGtBd,GACAA,EAAehG,UAAYiG,EAAOjG,SAClCgG,EAAeN,gBAAkBO,EAAOP,gBACxCqB,EAAAA,EAAAA,GAAMf,EAAepH,KAAMqH,EAAOrH,OAKpCyH,EAAKW,UAAUf,EACjB,EAuCIgB,EAAeP,EAAS7E,UAAUgF,GArCtB,SAAVK,EAAWjH,GACf,IAAMkH,EAAOT,EAAe,KAC5BO,EAAaG,cAQb,IACEV,EAASW,mBACTJ,EAAeP,EAAS7E,UAAUgF,EAAQK,E,CAC1C,QACAR,EAAe,KAAIS,C,CAGrB,IAAKG,EAAeC,KAAKtH,EAAO,iBAE9B,MAAMA,EAGR,IAAM+F,EAAiBK,EAAKJ,SAEzBD,GACAA,GAAkBA,EAAehG,WACjC+G,EAAAA,EAAAA,GAAM9G,EAAO+F,EAAe/F,SAE7BoG,EAAKW,UAAU,CACbpI,KAAOoH,GAAkBA,EAAepH,KACxCqB,MAAOA,EACPD,SAAS,EACT0F,cAAeC,EAAAA,EAAAA,OAGrB,IAIA,OAAO,WAAM,OAAAsB,EAAaG,aAAb,CACf,GAAG,CAODV,EACAtL,KAAKoL,eACLpL,KAAKqD,OAAO+I,yBAGd,WAAM,SAAKV,kBAAL,IACN,WAAM,SAAKA,kBAAL,IAIR1L,KAAKqM,2BAA2BxB,GAEhC,IAAMyB,EAActM,KAAKuM,cAAc1B,GAOvC,OALKyB,EAAY1H,SAAW5E,KAAK+J,gBAAgByC,OAC/CxM,KAAK+J,gBAAgB0C,SAAQ,SAAAzB,GAAW,OAAAA,EAAQsB,EAAR,IACxCtM,KAAK+J,gBAAgB2C,SAGhBJ,CACT,EAUQlD,EAAAA,UAAAA,WAAR,SACEL,G,MAEMoC,EAAoBnL,KAAK2M,wBAC7B3M,KAAK4M,iBAAmB7D,GAMpB8D,EAA2B7M,KAAKmL,mBASpCnL,KAAKiK,oBAAoB6C,IAAID,KAC5BlB,EAAAA,EAAAA,GAAMR,EAAmB0B,KAE1B7M,KAAKmL,kBAAoBA,EAErB0B,GAA4B7M,KAAK+M,aAMnC/M,KAAKiK,oBAAoB+C,OAAOH,GAUhC7M,KAAK+M,WAAWE,UAAUjN,KAAKkN,sBAK/BlN,KAAK8K,cAA0B,QAAX,EAAA9K,KAAK6K,cAAM,eAAErH,OAAQxD,KAAK8K,aAC9C9K,KAAK6K,YAAS,IAUlB7K,KAAKmN,YAAcpE,EAAQoE,aAAe/D,EAAcgE,UAAUD,YAClEnN,KAAK8L,QAAU/C,EAAQ+C,SAAW1C,EAAcgE,UAAUtB,SAGvD9L,KAAKoL,iBAAkBpL,KAAKqD,OAAO+I,wBACN,IAA9BpM,KAAK4M,iBAAiBS,KACrBrN,KAAK4M,iBAAiBU,KAMvBtN,KAAK4M,iBAAiBU,MACiB,YAAvCtN,KAAKmL,kBAAkBxG,YAYvB3E,KAAK6K,OAAS7K,KAAKwK,kBAEnBxK,KAAK6K,SAAW7K,KAAKoK,mBACrBpK,KAAK6K,SAAW7K,KAAKwK,oBAErBxK,KAAK6K,YAAS,GApBd7K,KAAK6K,OAAS7K,KAAKoK,iBAsBvB,EAEQhB,EAAAA,UAAAA,mBAAR,WACE,IAAMmE,EAEF,GAEEC,EAAiBxN,KAAKqD,OAAOoK,eAAeC,WAsBlD,OArBIF,GAAgBD,EAAQ7E,KAAK8E,GAE7BxN,KAAK4M,iBAAiBa,gBACxBF,EAAQ7E,KAAK1I,KAAK4M,iBAAiBa,gBAarCF,EAAQ7E,MAAKiF,EAAAA,EAAAA,GACX3N,KAAK+M,YAAc/M,KAAK+M,WAAWhE,QACnC/I,KAAKmL,oBAGAoC,EAAQK,OACbC,EAAAA,EAEJ,EAiBQzE,EAAAA,UAAAA,wBAAR,SAAgC/B,G,WAAA,QAAAA,EAAAA,CAAAA,GAC9B,IAAAiG,EAAI,OAQDQ,GAPA,MACQ,cACJ,UACO,kBAIC,UATe,0DAaxB3C,EACJjE,OAAOC,OAAO2G,EAAc,CAAExK,MAAOtD,KAAKsD,QAkB5C,IAfEtD,KAAKoL,gBAE+B,iBAAlCD,EAAkBxG,aACgB,sBAAlCwG,EAAkBxG,cAKpBwG,EAAkBxG,YAAc,eAG7BwG,EAAkB3G,YACrB2G,EAAkB3G,UAAY,CAAC,GAG7B8I,EAAM,CAEN,MAEEnC,EAAiB,YAFnBxG,OAAW,IAAG,EAAA3E,KAAK+N,wBAAuB,EAC1CC,EACE7C,EAAiB,mBADnB8C,OAAkB,IAAG,EAAAtJ,EAAW,EAMlCuC,OAAOC,OAAOgE,EAAmB,CAC/B8C,mBAAkB,EAClBtJ,YAAa,W,MAELwG,EAAkBxG,cAC5BwG,EAAkBxG,aACD,QAAf,EAAA3E,KAAK+M,kBAAU,eAAEhE,QAAQkF,qBACzBjO,KAAK+N,yBAGT,OAAO5C,CACT,EAEA/B,EAAAA,UAAAA,sBAAA,W,QACE,OACsC,QAApC,EAAApJ,KAAK4M,iBAAiBa,sBAAc,eAAE9I,eACD,QAArC,EAAA3E,KAAKqD,OAAOoK,eAAeC,kBAAU,eAAE/I,cACvC,aAEJ,EAKQyE,EAAAA,UAAAA,YAAR,SAAoB5F,GAAc,EAC1B4F,EAAAA,UAAAA,QAAR,SAAgBvE,GAAqB,EAQ7BuE,EAAAA,UAAAA,mBAAR,WAIE,IAAMkC,EAAWtL,KAAK+M,WACpB/M,KAAKoL,gBACApL,KAAKoL,eAAe8C,iBAAiBlO,KAAKmL,oBAC1CnL,KAAK+M,YACL/M,KAAKqD,OAAOqK,WAAW1N,KAAKkN,sBAEnClN,KAAKmO,gBAAiBC,EAAAA,EAAAA,UAAQ,WAAM,MAAC,CACnCC,QAAS/C,EAAS+C,QAAQtL,KAAKuI,GAC/B2B,UAAW3B,EAAS2B,UAAUlK,KAAKuI,GACnClG,UAAWkG,EAASlG,UAAUrC,KAAKuI,GACnCnF,YAAamF,EAASnF,YAAYpD,KAAKuI,GACvCgD,aAAchD,EAASgD,aAAavL,KAAKuI,GACzCiD,YAAajD,EAASiD,YAAYxL,KAAKuI,GACvCkD,gBAAiBlD,EAASkD,gBAAgBzL,KAAKuI,GAPb,GAQhC,CAACA,IAEL,IAAMmD,KAC0B,IAA9BzO,KAAK4M,iBAAiBS,KACtBrN,KAAK4M,iBAAiBU,MAYxB,OATItN,KAAKoL,gBAAkBqD,IACzBzO,KAAKoL,eAAesD,sBAAsBpD,GAEtCA,EAASI,mBAAmB9G,SAE9B5E,KAAKoL,eAAeuD,0BAA0BrD,IAI3CA,CACT,EAOQlC,EAAAA,UAAAA,UAAR,SAAkBwF,GAChB,IAAMhE,EAAiB5K,KAAK6K,OACxBD,GAAkBA,EAAepH,OACnCxD,KAAK8K,aAAeF,EAAepH,MAErCxD,KAAK6K,OAAS+D,EAGd5O,KAAKgH,cACLhH,KAAK6O,uBAAuBD,EAC9B,EAEQxF,EAAAA,UAAAA,uBAAR,SAA+ByB,GAA/B,WACOA,EAAOjG,SAEVmG,QAAQC,UAAU8D,MAAK,WACjBjE,EAAOhG,MACToG,EAAKa,QAAQjB,EAAOhG,OACXgG,EAAOrH,MAChByH,EAAKkC,YAAYtC,EAAOrH,KAE5B,IAAGuL,OAAM,SAAAlK,GACPgC,SAAUC,EAAAA,GAAAA,KAAY,EACxB,GAEJ,EAEQsC,EAAAA,UAAAA,iBAAR,WASE,OALKpJ,KAAK6K,QACR7K,KAAK6O,uBACH7O,KAAK6K,OAAS7K,KAAK+M,WAAWrB,oBAG3B1L,KAAK6K,MACd,EAUAzB,EAAAA,UAAAA,cAAA,SACEyB,GAEA,IAAIyB,EAActM,KAAKyK,mBAAmBxC,IAAI4C,GAC9C,GAAIyB,EAAa,OAAOA,EAEhB,IAAA9I,EAA2CqH,EAAM,KAA/BmE,GAAyBnE,EAAM,SAAX,QAAKA,EAA7C,qBAoBN,OAnBA7K,KAAKyK,mBAAmBwE,IAAIpE,EAAQyB,GAAc,2BAChD9I,KAAI,GACDwL,GACAhP,KAAKmO,gBAAc,CACtB9K,OAAQrD,KAAKqD,OACb0J,WAAY/M,KAAK+M,WACjBvI,UAAWxE,KAAK+M,WAAWvI,UAC3B0K,QAASlP,KAAK4M,iBAAiBU,KAC/BxC,aAAc9K,KAAK8K,iBAGhBwB,EAAYzH,QAASsK,EAAAA,EAAAA,GAAgBtE,EAAOuE,UAK/C9C,EAAYzH,MAAQ,IAAIwK,EAAAA,EAAY,CAAEC,cAAezE,EAAOuE,UAGvD9C,CACT,EAEQlD,EAAAA,UAAAA,2BAAR,SAAmCyB,IAO/BA,EAAO0E,UACPvP,KAAK4M,iBAAiB4C,gBACrB3E,EAAOjG,SACNiG,EAAOrH,MAA4C,IAApC0D,OAAOuI,KAAK5E,EAAOrH,MAAMmF,QACF,eAAxC3I,KAAK+M,WAAWhE,QAAQpE,cAExBuC,OAAOC,OAAO0D,EAAQ,CACpBjG,SAAS,EACT0F,cAAeC,EAAAA,EAAAA,UAEjBvK,KAAK+M,WAAWsB,UAEpB,EACF,EA1fA,E","sources":["components/ReadArticle/ReadArticle.jsx","components/SectionTriangleRight/SectionTriangleRight.jsx","components/Author/Author.jsx","components/BlogCard/BlogCard.jsx","pages/Blogs/Blogs.jsx","../node_modules/@apollo/src/react/hooks/useSyncExternalStore.ts","../node_modules/@apollo/src/react/parser/index.ts","../node_modules/@apollo/src/react/hooks/useQuery.ts","../node_modules/@apollo/src/react/hooks/useApolloClient.ts"],"sourcesContent":["import React, { Component } from \"react\";\nimport \"./ReadArticle.scss\";\nimport { Link } from \"react-router-dom\";\nimport { ReactComponent as ArrowRight } from \"../../assets/images/arrow-right.svg\";\nexport default class ReadArticle extends Component {\n  render() {\n    return (\n      <Link className=\"read_article\" to={this.props.to}>\n        <span>Read Article</span>\n        <ArrowRight className=\"read_article__arrow\"/>\n      </Link>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./SectionTriangleRight.scss\";\n\nexport default function TriangleRight(props) {\n  let className = '';\n\n  switch (props.variant){\n    case \"white\":\n        className = 'section_triangle_right--white';\n        break;\n    case \"green\":\n        className = 'section_triangle_right--green';\n        break;\n    case \"dark-blue\":\n        className = 'section_triangle_right--dark-blue';\n        break;\n    case \"light-blue\":\n        className = 'section_triangle_right--light-blue';\n        break;\n    case \"blue\":\n        className = 'section_triangle_right--blue';\n        break;\n    case \"footer\":\n        className = 'section_triangle_right--footer';\n        break;\n    case \"light-green\":\n        className = 'section_triangle_right--light-green';\n        break;\n    default:\n        className = '';\n  }\n  \n  return (\n    <svg\n      className=\"section_triangle_right\"\n      viewBox=\"0 0 1440 135\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <polygon className={className} points=\"0 0, 0 135, 1440 135\" />\n    </svg>\n  );\n}\n","import React from \"react\";\nimport './Author.scss';\n\nexport default function Author(props) {\n  const author = props.author?.node;\n\n  return (\n    <div className=\"author\">\n      <div className=\"author__avatar\">\n        <img src={author?.avatar.url} alt=\"author avatar\" />\n      </div>\n      <div className=\"author_info\">\n        <h4 className=\"author__name\">{author?.firstName || author?.lastName ? `${author.firstName ? author.firstName : ''} ${author.lastName? author.lastName : ''}` : `@${author?.username}`}</h4>\n        <p className=\"author__occupation\">{author?.roles?.edges[0]?.node?.displayName}</p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReadArticle from \"../ReadArticle/ReadArticle\";\nimport \"./BlogCard.scss\";\n\nconst Blog = (props) => {\n  const blog = props.blog;\n  const authorImage = blog.author.node.avatar.url;\n  const authorName =\n    blog.author.node.firstName +\n    (blog.author.node.lastName ? \" \" + blog.author.node.lastName : \"\");\n\n  const firstParagraph = blog.content.split(\"</p>\")[0].split(\"<p>\")[1];\n  return (\n    <div className={`post ${props.className}`}>\n      <img\n        className=\"post__image\"\n        src={blog.featuredImage.node.sourceUrl}\n        alt=\"blog sample\"\n      />\n      <div className=\"post__category-box\">\n        <p className=\"post__name section_name post__name--blue\">\n          {blog.categories.edges[0].node.name || \"Story\"}\n        </p>\n        <p className=\"post__date\">\n          {new Intl.DateTimeFormat(\"en-US\", {\n            month: \"short\",\n            year: \"numeric\",\n            day: \"2-digit\",\n          }).format(new Date(blog.date))}\n        </p>\n      </div>\n      <h2 className=\"post__title\">{blog.title}</h2>\n\n      <p\n        className=\"post__summary\"\n        dangerouslySetInnerHTML={{ __html: firstParagraph }}\n      ></p>\n\n      <div className=\"post__author\">\n        <img\n          className=\"post__author-image\"\n          src={authorImage}\n          alt={authorName}\n        />\n        <p className=\"post__author-name\">{authorName}</p>\n      </div>\n      <ReadArticle />\n    </div>\n  );\n};\n\nexport default Blog;\n","import React, { Component, Fragment, Suspense } from \"react\";\nimport \"./Blogs.scss\";\nimport ReadArticle from \"../../components/ReadArticle/ReadArticle\";\nimport SectionTriangleRight from \"../../components/SectionTriangleRight/SectionTriangleRight\";\nimport Author from \"../../components/Author/Author\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_CATEGORIES, GET_POSTS } from \"../../lib/graphqlQuery\";\nimport client from \"../../configurations/apollo\";\nimport Button from \"../../components/Button/Button\";\nimport BlogCard from \"../../components/BlogCard/BlogCard\";\n\nexport default class Blogs extends Component {\n  blogs = { chip: \"all\", categories: [] };\n\n  constructor(props) {\n    super(props);\n\n    this.state = this.blogs;\n    this.handleRadioChange = this.handleRadioChange.bind(this);\n  }\n\n  async componentDidMount() {\n    // this.handleResize();\n    // window.addEventListener(\"resize\", this.handleResize);\n    await this.getCategories();\n  }\n\n  componentWillUnmount() {\n    // window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  // handleResize() {\n  //   const heroBlog = document.querySelector(\".hero_blog\");\n  //   const heroBlogWrapper = document.querySelector(\".hero_blog__wrapper\");\n\n  //   heroBlog.style.height =\n  //     parseInt(window.getComputedStyle(heroBlogWrapper).height.split(\"px\")) -\n  //     92 +\n  //     \"px\";\n  // }\n\n  handleRadioChange(event) {\n    this.blogs.chip = event.target.id;\n    this.setState(this.blogs);\n  }\n\n  async getCategories() {\n    const categories = await client.query({ query: GET_CATEGORIES });\n    this.blogs.categories = categories.data.categories.edges;\n    this.setState(this.blogs);\n  }\n\n  render() {\n    return (\n      <Suspense>\n        <main className=\"blogs\">\n          <section className=\"hero\" background=\"light\">\n            <div className=\"container\">\n              <div className=\"hero_blog\">\n                <div className=\"hero_blog__wrapper\">\n                  <HeroBlogInfo />\n                </div>\n                <div className=\"hero_graphic\"></div>\n              </div>\n            </div>\n            <SectionTriangleRight variant=\"white\" />\n          </section>\n\n          <section className=\"posts\">\n            <div className=\"container\">\n              <div className=\"chips\">\n                {this.state.categories.map(\n                  (category, index) =>\n                    category.node.name.toLowerCase() !== \"uncategorised\" && (\n                      <div className=\"chip\" key={index}>\n                        <input\n                          id={category.node.name}\n                          type=\"radio\"\n                          name=\"radio\"\n                          onChange={this.handleRadioChange}\n                          checked={\n                            this.state.chip.toLowerCase() ===\n                            category.node.name.toLowerCase()\n                          }\n                        />\n                        <label htmlFor={category.node.name}>\n                          {category.node.name}\n                        </label>\n                      </div>\n                    )\n                )}\n              </div>\n\n              <BlogsView chip={this.state.chip} />\n            </div>\n            <SectionTriangleRight variant=\"footer\" />\n          </section>\n        </main>\n      </Suspense>\n    );\n  }\n}\n\nconst HeroBlogInfo = () => {\n  const { loading, error, data } = useQuery(GET_POSTS, {\n    variables: { first: 1, after: null },\n    fetchPolicy: \"no-cache\",\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ErrorL {error}</p>;\n\n  const blog = data.posts.edges[0].node;\n\n  // Get the first paragraph of the blog\n  const firstParagraph = blog.content.split(\"</p>\")[0].split(\"<p>\")[1];\n\n  return (\n    <Fragment>\n      <div className=\"hero_blog__image\">\n        <img src={blog.featuredImage.node.sourceUrl} alt=\"blog hero\" />\n      </div>\n      <div className=\"hero_blog__content\">\n        <div className=\"hero_blog__content-box\">\n          <p className=\"section_name hero_blog__name\">BLOG TODAYS</p>\n          <h1 className=\"hero_blog__title\">{blog.title}</h1>\n          <p\n            className=\"hero_blog__summary\"\n            dangerouslySetInnerHTML={{\n              __html: firstParagraph,\n            }}\n          ></p>\n          <ReadArticle id={blog.id} />\n        </div>\n\n        <Author author={blog.author} />\n      </div>\n    </Fragment>\n  );\n};\n\nconst BlogsView = (props) => {\n  const batchSize = 8;\n  // get the first post to get the cursor for the first batch of posts\n  const { data: firstPost } = useQuery(GET_POSTS, {\n    variables: {\n      first: 1,\n    },\n  });\n\n  // get the rest of the posts\n  const { loading, error, data, fetchMore } = useQuery(GET_POSTS, {\n    variables: {\n      first: batchSize,\n      after: firstPost?.posts?.pageInfo.endCursor,\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  if (!data && loading) return <p>Loading...</p>;\n\n  if (error) return <p>An error occured</p>;\n\n  if (!data) {\n    return <p>No posts yet</p>;\n  }\n\n  // show only posts that have the selected category\n  let posts = data.posts.edges.map((edge) => edge.node);\n  const postInfo = data.posts.pageInfo;\n\n  if (props.chip.toLowerCase() !== \"all\") {\n    // set posts to only posts that have the selected category\n    posts = posts.filter((post) => {\n      const categories = post.categories.edges.map((edge) => edge.node.name);\n      return categories.includes(props.chip);\n    });\n  }\n\n  return (\n    <Fragment>\n      <div className=\"posts_view\">\n        {posts.map((post, index) => (\n          <BlogCard key={index} blog={post} />\n        ))}\n      </div>\n      <div className=\"view_more\">\n        {postInfo.hasNextPage ? (\n          <Button\n            text={loading ? \"Loading...\" : \"View all posts\"}\n            type=\"arrow outline\"\n            arrowVariant=\"down\"\n            color=\"green\"\n            disabled={loading}\n            onClick={(e) => {\n              e.preventDefault();\n              fetchMore({\n                variables: {\n                  first: batchSize,\n                  after: data.posts.pageInfo.endCursor,\n                },\n                updateQuery: (prev, { fetchMoreResult }) => {\n                  if (!fetchMoreResult) return prev;\n                  return {\n                    ...prev,\n                    posts: {\n                      ...prev.posts,\n                      ...fetchMoreResult.posts,\n                      edges: [\n                        ...prev.posts.edges,\n                        ...fetchMoreResult.posts.edges,\n                      ],\n                    },\n                  };\n                },\n              });\n            }}\n          />\n        ) : (\n          <p>All posts loaded.</p>\n        )}\n      </div>\n    </Fragment>\n  );\n};\n","import { invariant } from '../../utilities/globals';\nimport * as React from 'react';\n\nimport { canUseLayoutEffect } from '../../utilities';\n\nlet didWarnUncachedGetSnapshot = false;\n\ntype RealUseSESHookType =\n  // This import depends only on the @types/use-sync-external-store package, not\n  // the actual use-sync-external-store package, which is not installed. It\n  // might be nice to get this type from React 18, but it still needs to work\n  // when only React 17 or earlier is installed.\n  typeof import(\"use-sync-external-store\").useSyncExternalStore;\n\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nconst uSESKey = \"useSyncExternalStore\" as keyof typeof React;\nconst realHook = React[uSESKey] as RealUseSESHookType | undefined;\n\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nexport const useSyncExternalStore: RealUseSESHookType = realHook || ((\n  subscribe,\n  getSnapshot,\n  getServerSnapshot,\n) => {\n  // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n  const value = getSnapshot();\n  if (\n    // DEVIATION: Using our own __DEV__ polyfill (from ../../utilities/globals).\n    __DEV__ &&\n    !didWarnUncachedGetSnapshot &&\n    // DEVIATION: Not using Object.is because we know our snapshots will never\n    // be exotic primitive values like NaN, which is !== itself.\n    value !== getSnapshot()\n  ) {\n    didWarnUncachedGetSnapshot = true;\n    // DEVIATION: Using invariant.error instead of console.error directly.\n    invariant.error(\n      'The result of getSnapshot should be cached to avoid an infinite loop',\n    );\n  }\n\n  // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n  const [{inst}, forceUpdate] = React.useState({inst: {value, getSnapshot}});\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  if (canUseLayoutEffect) {\n    // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n    // which may seem like a conditional hook, but this code ends up behaving\n    // unconditionally (one way or the other) because canUseLayoutEffect is\n    // constant.\n    React.useLayoutEffect(() => {\n      Object.assign(inst, { value, getSnapshot });\n      // Whenever getSnapshot or subscribe changes, we need to check in the\n      // commit phase if there was an interleaved mutation. In concurrent mode\n      // this can happen all the time, but even in synchronous mode, an earlier\n      // effect may have mutated the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({inst});\n      }\n    }, [subscribe, value, getSnapshot]);\n  } else {\n    Object.assign(inst, { value, getSnapshot });\n  }\n\n  React.useEffect(() => {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({inst});\n    }\n\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(function handleStoreChange() {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({inst});\n      }\n    });\n  }, [subscribe]);\n\n  return value;\n});\n\nfunction checkIfSnapshotChanged<Snapshot>({\n  value,\n  getSnapshot,\n}: {\n  value: Snapshot;\n  getSnapshot: () => Snapshot;\n}): boolean {\n  try {\n    return value !== getSnapshot();\n  } catch {\n    return true;\n  }\n}\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments: DefinitionNode[] = []\n  const queries: DefinitionNode[] = []\n  const mutations: DefinitionNode[] = []\n  const subscriptions: DefinitionNode[] = []\n\n  for (const x of document.definitions) {\n    if (x.kind === 'FragmentDefinition') {\n      fragments.push(x);\n      continue\n    }\n\n    if (x.kind === 'OperationDefinition') {\n      switch (x.operation) {\n        case 'query':\n          queries.push(x);\n          break;\n        case 'mutation':\n          mutations.push(x);\n          break;\n        case 'subscription':\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  useCallback,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useSyncExternalStore } from './useSyncExternalStore';\nimport { equal } from '@wry/equality';\n\nimport { mergeOptions, OperationVariables, WatchQueryFetchPolicy } from '../../core';\nimport { ApolloContextValue, getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloClient,\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n  ObservableQueryFields,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\nimport { canUseWeakMap, canUseWeakSet, compact, isNonEmptyArray, maybeDeepFreeze } from '../../utilities';\n\nconst {\n  prototype: {\n    hasOwnProperty,\n  },\n} = Object;\n\nexport function useQuery<\n  TData = any,\n  TVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = Object.create(null),\n): QueryResult<TData, TVariables> {\n  return useInternalState(\n    useApolloClient(options.client),\n    query,\n  ).useQuery(options);\n}\n\nexport function useInternalState<TData, TVariables>(\n  client: ApolloClient<any>,\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n): InternalState<TData, TVariables> {\n  const stateRef = useRef<InternalState<TData, TVariables>>();\n  if (\n    !stateRef.current ||\n    client !== stateRef.current.client ||\n    query !== stateRef.current.query\n  ) {\n    stateRef.current = new InternalState(client, query, stateRef.current);\n  }\n  const state = stateRef.current;\n\n  // By default, InternalState.prototype.forceUpdate is an empty function, but\n  // we replace it here (before anyone has had a chance to see this state yet)\n  // with a function that unconditionally forces an update, using the latest\n  // setTick function. Updating this state by calling state.forceUpdate is the\n  // only way we trigger React component updates (no other useState calls within\n  // the InternalState class).\n  const [_tick, setTick] = useState(0);\n  state.forceUpdate = () => {\n    setTick(tick => tick + 1);\n  };\n\n  return state;\n}\n\nclass InternalState<TData, TVariables> {\n  constructor(\n    public readonly client: ReturnType<typeof useApolloClient>,\n    public readonly query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    previous?: InternalState<TData, TVariables>,\n  ) {\n    verifyDocumentType(query, DocumentType.Query);\n\n    // Reuse previousData from previous InternalState (if any) to provide\n    // continuity of previousData even if/when the query or client changes.\n    const previousResult = previous && previous.result;\n    const previousData = previousResult && previousResult.data;\n    if (previousData) {\n      this.previousData = previousData;\n    }\n  }\n\n  forceUpdate() {\n    // Replaced (in useInternalState) with a method that triggers an update.\n    invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n  }\n\n  asyncUpdate() {\n    return new Promise<QueryResult<TData, TVariables>>(resolve => {\n      this.asyncResolveFns.add(resolve);\n      this.optionsToIgnoreOnce.add(this.watchQueryOptions);\n      this.forceUpdate();\n    });\n  }\n\n  private asyncResolveFns = new Set<\n    (result: QueryResult<TData, TVariables>) => void\n  >();\n\n  private optionsToIgnoreOnce = new (canUseWeakSet ? WeakSet : Set)<\n    WatchQueryOptions<TVariables, TData>\n  >();\n\n  // Methods beginning with use- should be called according to the standard\n  // rules of React hooks: only at the top level of the calling function, and\n  // without any dynamic conditional logic.\n  useQuery(options: QueryHookOptions<TData, TVariables>) {\n    // The renderPromises field gets initialized here in the useQuery method, at\n    // the beginning of everything (for a given component rendering, at least),\n    // so we can safely use this.renderPromises in other/later InternalState\n    // methods without worrying it might be uninitialized. Even after\n    // initialization, this.renderPromises is usually undefined (unless SSR is\n    // happening), but that's fine as long as it has been initialized that way,\n    // rather than left uninitialized.\n    this.renderPromises = useContext(getApolloContext()).renderPromises;\n\n    this.useOptions(options);\n\n    const obsQuery = this.useObservableQuery();\n\n    const result = useSyncExternalStore(\n      useCallback(() => {\n        if (this.renderPromises) {\n          return () => {};\n        }\n\n        const onNext = () => {\n          const previousResult = this.result;\n          // We use `getCurrentResult()` instead of the onNext argument because\n          // the values differ slightly. Specifically, loading results will have\n          // an empty object for data instead of `undefined` for some reason.\n          const result = obsQuery.getCurrentResult();\n          // Make sure we're not attempting to re-render similar results\n          if (\n            previousResult &&\n            previousResult.loading === result.loading &&\n            previousResult.networkStatus === result.networkStatus &&\n            equal(previousResult.data, result.data)\n          ) {\n            return;\n          }\n\n          this.setResult(result);\n        };\n\n        const onError = (error: Error) => {\n          const last = obsQuery[\"last\"];\n          subscription.unsubscribe();\n          // Unfortunately, if `lastError` is set in the current\n          // `observableQuery` when the subscription is re-created,\n          // the subscription will immediately receive the error, which will\n          // cause it to terminate again. To avoid this, we first clear\n          // the last error/result from the `observableQuery` before re-starting\n          // the subscription, and restore it afterwards (so the subscription\n          // has a chance to stay open).\n          try {\n            obsQuery.resetLastResults();\n            subscription = obsQuery.subscribe(onNext, onError);\n          } finally {\n            obsQuery[\"last\"] = last;\n          }\n\n          if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n            // The error is not a GraphQL error\n            throw error;\n          }\n\n          const previousResult = this.result;\n          if (\n            !previousResult ||\n            (previousResult && previousResult.loading) ||\n            !equal(error, previousResult.error)\n          ) {\n            this.setResult({\n              data: (previousResult && previousResult.data) as TData,\n              error: error as ApolloError,\n              loading: false,\n              networkStatus: NetworkStatus.error,\n            });\n          }\n        };\n\n        let subscription = obsQuery.subscribe(onNext, onError);\n\n        return () => subscription.unsubscribe();\n      }, [\n        // We memoize the subscribe function using useCallback and the following\n        // dependency keys, because the subscribe function reference is all that\n        // useSyncExternalStore uses internally as a dependency key for the\n        // useEffect ultimately responsible for the subscription, so we are\n        // effectively passing this dependency array to that useEffect buried\n        // inside useSyncExternalStore, as desired.\n        obsQuery,\n        this.renderPromises,\n        this.client.disableNetworkFetches,\n      ]),\n\n      () => this.getCurrentResult(),\n      () => this.getCurrentResult(),\n    );\n\n    // TODO Remove this method when we remove support for options.partialRefetch.\n    this.unsafeHandlePartialRefetch(result);\n\n    const queryResult = this.toQueryResult(result);\n\n    if (!queryResult.loading && this.asyncResolveFns.size) {\n      this.asyncResolveFns.forEach(resolve => resolve(queryResult));\n      this.asyncResolveFns.clear();\n    }\n\n    return queryResult;\n  }\n\n  // These members (except for renderPromises) are all populated by the\n  // useOptions method, which is called unconditionally at the beginning of the\n  // useQuery method, so we can safely use these members in other/later methods\n  // without worrying they might be uninitialized.\n  private renderPromises: ApolloContextValue[\"renderPromises\"];\n  private queryHookOptions: QueryHookOptions<TData, TVariables>;\n  private watchQueryOptions: WatchQueryOptions<TVariables, TData>;\n\n  private useOptions(\n    options: QueryHookOptions<TData, TVariables>,\n  ) {\n    const watchQueryOptions = this.createWatchQueryOptions(\n      this.queryHookOptions = options,\n    );\n\n    // Update this.watchQueryOptions, but only when they have changed, which\n    // allows us to depend on the referential stability of\n    // this.watchQueryOptions elsewhere.\n    const currentWatchQueryOptions = this.watchQueryOptions;\n\n    // To force this equality test to \"fail,\" thereby reliably triggering\n    // observable.reobserve, add any current WatchQueryOptions object(s) you\n    // want to be ignored to this.optionsToIgnoreOnce. A similar effect could be\n    // achieved by nullifying this.watchQueryOptions so the equality test\n    // immediately fails because currentWatchQueryOptions is null, but this way\n    // we can promise a truthy this.watchQueryOptions at all times.\n    if (\n      this.optionsToIgnoreOnce.has(currentWatchQueryOptions) ||\n      !equal(watchQueryOptions, currentWatchQueryOptions)\n    ) {\n      this.watchQueryOptions = watchQueryOptions;\n\n      if (currentWatchQueryOptions && this.observable) {\n        // As advertised in the -Once of this.optionsToIgnoreOnce, this trick is\n        // only good for one forced execution of observable.reobserve per\n        // ignored WatchQueryOptions object, though it is unlikely we will ever\n        // see this exact currentWatchQueryOptions object again here, since we\n        // just replaced this.watchQueryOptions with watchQueryOptions.\n        this.optionsToIgnoreOnce.delete(currentWatchQueryOptions);\n\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        this.observable.reobserve(this.getObsQueryOptions());\n\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        this.previousData = this.result?.data || this.previousData;\n        this.result = void 0;\n      }\n    }\n\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n\n    if (\n      (this.renderPromises || this.client.disableNetworkFetches) &&\n      this.queryHookOptions.ssr === false &&\n      !this.queryHookOptions.skip\n    ) {\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      this.result = this.ssrDisabledResult;\n    } else if (\n      this.queryHookOptions.skip ||\n      this.watchQueryOptions.fetchPolicy === 'standby'\n    ) {\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      this.result = this.skipStandbyResult;\n    } else if (\n      this.result === this.ssrDisabledResult ||\n      this.result === this.skipStandbyResult\n    ) {\n      this.result = void 0;\n    }\n  }\n\n  private getObsQueryOptions(): WatchQueryOptions<TVariables, TData> {\n    const toMerge: Array<\n      Partial<WatchQueryOptions<TVariables, TData>>\n    > = [];\n\n    const globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n\n    if (this.queryHookOptions.defaultOptions) {\n      toMerge.push(this.queryHookOptions.defaultOptions);\n    }\n\n    // We use compact rather than mergeOptions for this part of the merge,\n    // because we want watchQueryOptions.variables (if defined) to replace\n    // this.observable.options.variables whole. This replacement allows\n    // removing variables by removing them from the variables input to\n    // useQuery. If the variables were always merged together (rather than\n    // replaced), there would be no way to remove existing variables.\n    // However, the variables from options.defaultOptions and globalDefaults\n    // (if provided) should be merged, to ensure individual defaulted\n    // variables always have values, if not otherwise defined in\n    // observable.options or watchQueryOptions.\n    toMerge.push(compact(\n      this.observable && this.observable.options,\n      this.watchQueryOptions,\n    ));\n\n    return toMerge.reduce(\n      mergeOptions\n    ) as WatchQueryOptions<TVariables, TData>;\n  }\n\n  private ssrDisabledResult = maybeDeepFreeze({\n    loading: true,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.loading,\n  });\n\n  private skipStandbyResult = maybeDeepFreeze({\n    loading: false,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.ready,\n  });\n\n  // A function to massage options before passing them to ObservableQuery.\n  private createWatchQueryOptions({\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    ...otherOptions\n  }: QueryHookOptions<TData, TVariables> = {}): WatchQueryOptions<TVariables, TData> {\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    const watchQueryOptions: WatchQueryOptions<TVariables, TData> =\n      Object.assign(otherOptions, { query: this.query });\n\n    if (\n      this.renderPromises &&\n      (\n        watchQueryOptions.fetchPolicy === 'network-only' ||\n        watchQueryOptions.fetchPolicy === 'cache-and-network'\n      )\n    ) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {} as TVariables;\n    }\n\n    if (skip) {\n      const {\n        fetchPolicy = this.getDefaultFetchPolicy(),\n        initialFetchPolicy = fetchPolicy,\n      } = watchQueryOptions;\n\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy,\n        fetchPolicy: 'standby',\n      });\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy =\n        this.observable?.options.initialFetchPolicy ||\n        this.getDefaultFetchPolicy();\n    }\n\n    return watchQueryOptions;\n  }\n\n  getDefaultFetchPolicy(): WatchQueryFetchPolicy {\n    return (\n      this.queryHookOptions.defaultOptions?.fetchPolicy ||\n      this.client.defaultOptions.watchQuery?.fetchPolicy ||\n      \"cache-first\"\n    );\n  }\n\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  private onCompleted(data: TData) {}\n  private onError(error: ApolloError) {}\n\n  private observable: ObservableQuery<TData, TVariables>;\n  private obsQueryFields: Omit<\n    ObservableQueryFields<TData, TVariables>,\n    \"variables\"\n  >;\n\n  private useObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    const obsQuery = this.observable =\n      this.renderPromises\n        && this.renderPromises.getSSRObservable(this.watchQueryOptions)\n        || this.observable // Reuse this.observable if possible (and not SSR)\n        || this.client.watchQuery(this.getObsQueryOptions());\n\n    this.obsQueryFields = useMemo(() => ({\n      refetch: obsQuery.refetch.bind(obsQuery),\n      reobserve: obsQuery.reobserve.bind(obsQuery),\n      fetchMore: obsQuery.fetchMore.bind(obsQuery),\n      updateQuery: obsQuery.updateQuery.bind(obsQuery),\n      startPolling: obsQuery.startPolling.bind(obsQuery),\n      stopPolling: obsQuery.stopPolling.bind(obsQuery),\n      subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n    }), [obsQuery]);\n\n    const ssrAllowed = !(\n      this.queryHookOptions.ssr === false ||\n      this.queryHookOptions.skip\n    );\n\n    if (this.renderPromises && ssrAllowed) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n\n      if (obsQuery.getCurrentResult().loading) {\n        // TODO: This is a legacy API which could probably be cleaned up\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n\n    return obsQuery;\n  }\n\n  // These members are populated by getCurrentResult and setResult, and it's\n  // okay/normal for them to be initially undefined.\n  private result: undefined | ApolloQueryResult<TData>;\n  private previousData: undefined | TData;\n\n  private setResult(nextResult: ApolloQueryResult<TData>) {\n    const previousResult = this.result;\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n    this.result = nextResult;\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult);\n  }\n\n  private handleErrorOrCompleted(result: ApolloQueryResult<TData>) {\n    if (!result.loading) {\n      // wait a tick in case we are in the middle of rendering a component\n      Promise.resolve().then(() => {\n        if (result.error) {\n          this.onError(result.error);\n        } else if (result.data) {\n          this.onCompleted(result.data);\n        }\n      }).catch(error => {\n        invariant.warn(error);\n      });\n    }\n  }\n\n  private getCurrentResult(): ApolloQueryResult<TData> {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!this.result) {\n      this.handleErrorOrCompleted(\n        this.result = this.observable.getCurrentResult()\n      );\n    }\n    return this.result;\n  }\n\n  // This cache allows the referential stability of this.result (as returned by\n  // getCurrentResult) to translate into referential stability of the resulting\n  // QueryResult object returned by toQueryResult.\n  private toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)<\n    ApolloQueryResult<TData>,\n    QueryResult<TData, TVariables>\n  >();\n\n  toQueryResult(\n    result: ApolloQueryResult<TData>,\n  ): QueryResult<TData, TVariables> {\n    let queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n\n    const { data, partial, ...resultWithoutPartial } = result;\n    this.toQueryResultCache.set(result, queryResult = {\n      data, // Ensure always defined, even if result.data is missing.\n      ...resultWithoutPartial,\n      ...this.obsQueryFields,\n      client: this.client,\n      observable: this.observable,\n      variables: this.observable.variables,\n      called: !this.queryHookOptions.skip,\n      previousData: this.previousData,\n    });\n\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      // TODO: Is it possible for both result.error and result.errors to be\n      // defined here?\n      queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n    }\n\n    return queryResult;\n  }\n\n  private unsafeHandlePartialRefetch(result: ApolloQueryResult<TData>) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      result.partial &&\n      this.queryHookOptions.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      this.observable.options.fetchPolicy !== 'cache-only'\n    ) {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      });\n      this.observable.refetch();\n    }\n  }\n}\n","import { invariant } from '../../utilities/globals';\nimport { useContext } from 'react';\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useApolloClient(\n  override?: ApolloClient<object>,\n): ApolloClient<object> {\n  const context = useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n    'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n    'instance in via options.',\n  );\n\n  return client;\n}\n"],"names":["ReadArticle","className","to","this","props","Component","TriangleRight","variant","viewBox","xmlns","points","Author","author","node","src","avatar","url","alt","firstName","lastName","username","roles","edges","displayName","blog","authorImage","authorName","firstParagraph","content","split","featuredImage","sourceUrl","categories","name","Intl","DateTimeFormat","month","year","day","format","Date","date","title","dangerouslySetInnerHTML","__html","Blogs","blogs","chip","state","handleRadioChange","bind","getCategories","event","target","id","setState","client","query","GET_CATEGORIES","data","Suspense","background","HeroBlogInfo","SectionTriangleRight","map","category","index","toLowerCase","type","onChange","checked","htmlFor","BlogsView","useQuery","GET_POSTS","variables","first","after","fetchPolicy","loading","error","posts","Fragment","firstPost","pageInfo","endCursor","notifyOnNetworkStatusChange","fetchMore","edge","postInfo","filter","post","includes","hasNextPage","Button","text","arrowVariant","color","disabled","onClick","e","preventDefault","updateQuery","prev","fetchMoreResult","didWarnUncachedGetSnapshot","useSyncExternalStore","React","subscribe","getSnapshot","getServerSnapshot","value","__DEV__","invariant","inst","forceUpdate","canUseLayoutEffect","Object","assign","checkIfSnapshotChanged","_a","DocumentType","cache","Map","operationName","Query","Mutation","Subscription","verifyDocumentType","document","operation","cached","get","fragments","queries","mutations","subscriptions","definitions","_i","x","kind","push","length","definition","variableDefinitions","requiredOperationName","options","create","stateRef","useRef","current","InternalState","useState","setTick","tick","useInternalState","override","context","useContext","getApolloContext","useApolloClient","previous","asyncResolveFns","Set","optionsToIgnoreOnce","canUseWeakSet","WeakSet","ssrDisabledResult","maybeDeepFreeze","networkStatus","NetworkStatus","skipStandbyResult","toQueryResultCache","canUseWeakMap","WeakMap","previousResult","result","previousData","Promise","resolve","_this","add","watchQueryOptions","renderPromises","useOptions","obsQuery","useObservableQuery","useCallback","onNext","getCurrentResult","equal","setResult","subscription","onError","last","unsubscribe","resetLastResults","hasOwnProperty","call","disableNetworkFetches","unsafeHandlePartialRefetch","queryResult","toQueryResult","size","forEach","clear","createWatchQueryOptions","queryHookOptions","currentWatchQueryOptions","has","observable","delete","reobserve","getObsQueryOptions","onCompleted","prototype","ssr","skip","toMerge","globalDefaults","defaultOptions","watchQuery","compact","reduce","mergeOptions","otherOptions","getDefaultFetchPolicy","_d","initialFetchPolicy","getSSRObservable","obsQueryFields","useMemo","refetch","startPolling","stopPolling","subscribeToMore","ssrAllowed","registerSSRObservable","addObservableQueryPromise","nextResult","handleErrorOrCompleted","then","catch","resultWithoutPartial","set","called","isNonEmptyArray","errors","ApolloError","graphQLErrors","partial","partialRefetch","keys"],"sourceRoot":""}