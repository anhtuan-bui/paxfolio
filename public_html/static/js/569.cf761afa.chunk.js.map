{"version":3,"file":"static/js/569.cf761afa.chunk.js","mappings":"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","sources":["assets/images/left.svg","assets/images/right.svg","components/Testimonial/Testimonial.jsx","../node_modules/@apollo/src/react/hooks/useSyncExternalStore.ts","../node_modules/@apollo/src/react/parser/index.ts","../node_modules/@apollo/src/react/hooks/useQuery.ts","../node_modules/@apollo/src/react/hooks/useApolloClient.ts"],"sourcesContent":["var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgLeft(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 10,\n    height: 18,\n    viewBox: \"0 0 10 18\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9 1.5L1.5 9L9 16.5\",\n    stroke: \"#0A61B4\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgLeft);\nexport default __webpack_public_path__ + \"static/media/left.482b7a8cfb145445f061ba6fd0059559.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgRight(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 10,\n    height: 18,\n    viewBox: \"0 0 10 18\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 1.5L8.5 9L1 16.5\",\n    stroke: \"#0A61B4\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgRight);\nexport default __webpack_public_path__ + \"static/media/right.860f22fa1256bcd17b01333cd0b9705b.svg\";\nexport { ForwardRef as ReactComponent };","import React, { Component, useRef } from \"react\";\nimport \"./Testimonial.scss\";\n\nimport arrowLeft from \"../../assets/images/left.svg\";\nimport arrowRight from \"../../assets/images/right.svg\";\n\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport { Autoplay, Pagination, Navigation } from \"swiper\";\nimport { SCREEN_SIZE } from \"../../configurations/configurations\";\n\n// Import Swiper styles\nimport \"swiper/scss\";\nimport \"swiper/scss/pagination\";\nimport \"swiper/scss/navigation\";\n\nimport { gql, useQuery } from \"@apollo/client\";\n\nconst GetAllTestimonials = gql`\n  query GetAllTestimonials {\n    testimonials {\n      nodes {\n        title\n        content\n        position\n      }\n    }\n  }\n`;\n\nvar home = {\n  numberOftestimonialsPerView: 3,\n  autoplaySpeed: 4000,\n};\n\nexport default class Testimonial extends Component {\n  testimonials = [];\n\n  constructor(props) {\n    super(props);\n\n    this.state = null;\n  }\n\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener(\"resize\", this.handleResize);\n\n    this.setState(this.testimonials);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize = () => {\n    const screenWidth = window.innerWidth;\n    if (screenWidth >= SCREEN_SIZE.large) {\n      home = {\n        numberOftestimonialsPerView: 3,\n      };\n    } else if (\n      screenWidth < SCREEN_SIZE.large &&\n      screenWidth >= SCREEN_SIZE.medium\n    ) {\n      home = {\n        numberOftestimonialsPerView: 2,\n      };\n    } else if (\n      screenWidth < SCREEN_SIZE.medium &&\n      screenWidth >= SCREEN_SIZE.small\n    ) {\n      home = {\n        numberOftestimonialsPerView: 2,\n      };\n    } else if (screenWidth < SCREEN_SIZE.small) {\n      home = {\n        numberOftestimonialsPerView: 1,\n      };\n    }\n    this.setState(home);\n  };\n\n  render() {\n    return <TestimonialSwiper values={this.testimonials} />;\n  }\n}\n\nconst TestimonialSwiper = (value) => {\n  const swiperRef = useRef();\n\n  const { loading, error, data } = useQuery(GetAllTestimonials);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>\n  }\n  const testimonials = data.testimonials.nodes;\n\n  return (\n    <div className=\"container\">\n      <div className=\"testimonial__container\">\n        <p className=\"testimonial__name section_name\">TESTIMONIAL</p>\n        <h2 className=\"testimonial__title\">\n          What people are saying about Paxform\n        </h2>\n        <div className=\"testimonial__swiper\">\n          <Swiper\n            slidesPerView={home.numberOftestimonialsPerView}\n            spaceBetween={24}\n            slidesPerGroup={home.numberOftestimonialsPerView}\n            loop={true}\n            autoplay={{\n              delay: 4000,\n              disableOnInteraction: false,\n            }}\n            autoHeight={false}\n            pagination={{\n              clickable: true,\n            }}\n            onBeforeInit={(swiper) => {\n              swiperRef.current = swiper;\n            }}\n            modules={[Autoplay, Pagination, Navigation]}\n            className=\"testimonial__slider\"\n          >\n            {testimonials.map((item, index) => {\n              return (\n                <SwiperSlide key={index}>\n                  <div className=\"testimonial_card\">\n                    <div\n                      className=\"testimonial_card__description\"\n                      dangerouslySetInnerHTML={{\n                        __html: item.content,\n                      }}\n                    ></div>\n                    <div className=\"testimonial_card__name-box\">\n                      <h3 className=\"testimonial_card__name\">\n                        {item.title}\n                      </h3>\n                      <p className=\"testimonial_card__position\">\n                        {item.position}\n                      </p>\n                    </div>\n                  </div>\n                </SwiperSlide>\n              );\n            })}\n          </Swiper>\n          <div className=\"slider__buttons--left\">\n            <button onClick={() => swiperRef.current?.slidePrev()}>\n              <img src={arrowLeft} alt=\"arrow left\" />\n            </button>\n          </div>\n          <div className=\"slider__buttons--right\">\n            <button onClick={() => swiperRef.current?.slideNext()}>\n              <img src={arrowRight} alt=\"arrow right\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { invariant } from '../../utilities/globals';\nimport * as React from 'react';\n\nimport { canUseLayoutEffect } from '../../utilities';\n\nlet didWarnUncachedGetSnapshot = false;\n\ntype RealUseSESHookType =\n  // This import depends only on the @types/use-sync-external-store package, not\n  // the actual use-sync-external-store package, which is not installed. It\n  // might be nice to get this type from React 18, but it still needs to work\n  // when only React 17 or earlier is installed.\n  typeof import(\"use-sync-external-store\").useSyncExternalStore;\n\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nconst uSESKey = \"useSyncExternalStore\" as keyof typeof React;\nconst realHook = React[uSESKey] as RealUseSESHookType | undefined;\n\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nexport const useSyncExternalStore: RealUseSESHookType = realHook || ((\n  subscribe,\n  getSnapshot,\n  getServerSnapshot,\n) => {\n  // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n  const value = getSnapshot();\n  if (\n    // DEVIATION: Using our own __DEV__ polyfill (from ../../utilities/globals).\n    __DEV__ &&\n    !didWarnUncachedGetSnapshot &&\n    // DEVIATION: Not using Object.is because we know our snapshots will never\n    // be exotic primitive values like NaN, which is !== itself.\n    value !== getSnapshot()\n  ) {\n    didWarnUncachedGetSnapshot = true;\n    // DEVIATION: Using invariant.error instead of console.error directly.\n    invariant.error(\n      'The result of getSnapshot should be cached to avoid an infinite loop',\n    );\n  }\n\n  // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n  const [{inst}, forceUpdate] = React.useState({inst: {value, getSnapshot}});\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  if (canUseLayoutEffect) {\n    // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n    // which may seem like a conditional hook, but this code ends up behaving\n    // unconditionally (one way or the other) because canUseLayoutEffect is\n    // constant.\n    React.useLayoutEffect(() => {\n      Object.assign(inst, { value, getSnapshot });\n      // Whenever getSnapshot or subscribe changes, we need to check in the\n      // commit phase if there was an interleaved mutation. In concurrent mode\n      // this can happen all the time, but even in synchronous mode, an earlier\n      // effect may have mutated the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({inst});\n      }\n    }, [subscribe, value, getSnapshot]);\n  } else {\n    Object.assign(inst, { value, getSnapshot });\n  }\n\n  React.useEffect(() => {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({inst});\n    }\n\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(function handleStoreChange() {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({inst});\n      }\n    });\n  }, [subscribe]);\n\n  return value;\n});\n\nfunction checkIfSnapshotChanged<Snapshot>({\n  value,\n  getSnapshot,\n}: {\n  value: Snapshot;\n  getSnapshot: () => Snapshot;\n}): boolean {\n  try {\n    return value !== getSnapshot();\n  } catch {\n    return true;\n  }\n}\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments: DefinitionNode[] = []\n  const queries: DefinitionNode[] = []\n  const mutations: DefinitionNode[] = []\n  const subscriptions: DefinitionNode[] = []\n\n  for (const x of document.definitions) {\n    if (x.kind === 'FragmentDefinition') {\n      fragments.push(x);\n      continue\n    }\n\n    if (x.kind === 'OperationDefinition') {\n      switch (x.operation) {\n        case 'query':\n          queries.push(x);\n          break;\n        case 'mutation':\n          mutations.push(x);\n          break;\n        case 'subscription':\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  useCallback,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useSyncExternalStore } from './useSyncExternalStore';\nimport { equal } from '@wry/equality';\n\nimport { mergeOptions, OperationVariables, WatchQueryFetchPolicy } from '../../core';\nimport { ApolloContextValue, getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloClient,\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n  ObservableQueryFields,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\nimport { canUseWeakMap, canUseWeakSet, compact, isNonEmptyArray, maybeDeepFreeze } from '../../utilities';\n\nconst {\n  prototype: {\n    hasOwnProperty,\n  },\n} = Object;\n\nexport function useQuery<\n  TData = any,\n  TVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = Object.create(null),\n): QueryResult<TData, TVariables> {\n  return useInternalState(\n    useApolloClient(options.client),\n    query,\n  ).useQuery(options);\n}\n\nexport function useInternalState<TData, TVariables>(\n  client: ApolloClient<any>,\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n): InternalState<TData, TVariables> {\n  const stateRef = useRef<InternalState<TData, TVariables>>();\n  if (\n    !stateRef.current ||\n    client !== stateRef.current.client ||\n    query !== stateRef.current.query\n  ) {\n    stateRef.current = new InternalState(client, query, stateRef.current);\n  }\n  const state = stateRef.current;\n\n  // By default, InternalState.prototype.forceUpdate is an empty function, but\n  // we replace it here (before anyone has had a chance to see this state yet)\n  // with a function that unconditionally forces an update, using the latest\n  // setTick function. Updating this state by calling state.forceUpdate is the\n  // only way we trigger React component updates (no other useState calls within\n  // the InternalState class).\n  const [_tick, setTick] = useState(0);\n  state.forceUpdate = () => {\n    setTick(tick => tick + 1);\n  };\n\n  return state;\n}\n\nclass InternalState<TData, TVariables> {\n  constructor(\n    public readonly client: ReturnType<typeof useApolloClient>,\n    public readonly query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    previous?: InternalState<TData, TVariables>,\n  ) {\n    verifyDocumentType(query, DocumentType.Query);\n\n    // Reuse previousData from previous InternalState (if any) to provide\n    // continuity of previousData even if/when the query or client changes.\n    const previousResult = previous && previous.result;\n    const previousData = previousResult && previousResult.data;\n    if (previousData) {\n      this.previousData = previousData;\n    }\n  }\n\n  forceUpdate() {\n    // Replaced (in useInternalState) with a method that triggers an update.\n    invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n  }\n\n  asyncUpdate() {\n    return new Promise<QueryResult<TData, TVariables>>(resolve => {\n      this.asyncResolveFns.add(resolve);\n      this.optionsToIgnoreOnce.add(this.watchQueryOptions);\n      this.forceUpdate();\n    });\n  }\n\n  private asyncResolveFns = new Set<\n    (result: QueryResult<TData, TVariables>) => void\n  >();\n\n  private optionsToIgnoreOnce = new (canUseWeakSet ? WeakSet : Set)<\n    WatchQueryOptions<TVariables, TData>\n  >();\n\n  // Methods beginning with use- should be called according to the standard\n  // rules of React hooks: only at the top level of the calling function, and\n  // without any dynamic conditional logic.\n  useQuery(options: QueryHookOptions<TData, TVariables>) {\n    // The renderPromises field gets initialized here in the useQuery method, at\n    // the beginning of everything (for a given component rendering, at least),\n    // so we can safely use this.renderPromises in other/later InternalState\n    // methods without worrying it might be uninitialized. Even after\n    // initialization, this.renderPromises is usually undefined (unless SSR is\n    // happening), but that's fine as long as it has been initialized that way,\n    // rather than left uninitialized.\n    this.renderPromises = useContext(getApolloContext()).renderPromises;\n\n    this.useOptions(options);\n\n    const obsQuery = this.useObservableQuery();\n\n    const result = useSyncExternalStore(\n      useCallback(() => {\n        if (this.renderPromises) {\n          return () => {};\n        }\n\n        const onNext = () => {\n          const previousResult = this.result;\n          // We use `getCurrentResult()` instead of the onNext argument because\n          // the values differ slightly. Specifically, loading results will have\n          // an empty object for data instead of `undefined` for some reason.\n          const result = obsQuery.getCurrentResult();\n          // Make sure we're not attempting to re-render similar results\n          if (\n            previousResult &&\n            previousResult.loading === result.loading &&\n            previousResult.networkStatus === result.networkStatus &&\n            equal(previousResult.data, result.data)\n          ) {\n            return;\n          }\n\n          this.setResult(result);\n        };\n\n        const onError = (error: Error) => {\n          const last = obsQuery[\"last\"];\n          subscription.unsubscribe();\n          // Unfortunately, if `lastError` is set in the current\n          // `observableQuery` when the subscription is re-created,\n          // the subscription will immediately receive the error, which will\n          // cause it to terminate again. To avoid this, we first clear\n          // the last error/result from the `observableQuery` before re-starting\n          // the subscription, and restore it afterwards (so the subscription\n          // has a chance to stay open).\n          try {\n            obsQuery.resetLastResults();\n            subscription = obsQuery.subscribe(onNext, onError);\n          } finally {\n            obsQuery[\"last\"] = last;\n          }\n\n          if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n            // The error is not a GraphQL error\n            throw error;\n          }\n\n          const previousResult = this.result;\n          if (\n            !previousResult ||\n            (previousResult && previousResult.loading) ||\n            !equal(error, previousResult.error)\n          ) {\n            this.setResult({\n              data: (previousResult && previousResult.data) as TData,\n              error: error as ApolloError,\n              loading: false,\n              networkStatus: NetworkStatus.error,\n            });\n          }\n        };\n\n        let subscription = obsQuery.subscribe(onNext, onError);\n\n        return () => subscription.unsubscribe();\n      }, [\n        // We memoize the subscribe function using useCallback and the following\n        // dependency keys, because the subscribe function reference is all that\n        // useSyncExternalStore uses internally as a dependency key for the\n        // useEffect ultimately responsible for the subscription, so we are\n        // effectively passing this dependency array to that useEffect buried\n        // inside useSyncExternalStore, as desired.\n        obsQuery,\n        this.renderPromises,\n        this.client.disableNetworkFetches,\n      ]),\n\n      () => this.getCurrentResult(),\n      () => this.getCurrentResult(),\n    );\n\n    // TODO Remove this method when we remove support for options.partialRefetch.\n    this.unsafeHandlePartialRefetch(result);\n\n    const queryResult = this.toQueryResult(result);\n\n    if (!queryResult.loading && this.asyncResolveFns.size) {\n      this.asyncResolveFns.forEach(resolve => resolve(queryResult));\n      this.asyncResolveFns.clear();\n    }\n\n    return queryResult;\n  }\n\n  // These members (except for renderPromises) are all populated by the\n  // useOptions method, which is called unconditionally at the beginning of the\n  // useQuery method, so we can safely use these members in other/later methods\n  // without worrying they might be uninitialized.\n  private renderPromises: ApolloContextValue[\"renderPromises\"];\n  private queryHookOptions: QueryHookOptions<TData, TVariables>;\n  private watchQueryOptions: WatchQueryOptions<TVariables, TData>;\n\n  private useOptions(\n    options: QueryHookOptions<TData, TVariables>,\n  ) {\n    const watchQueryOptions = this.createWatchQueryOptions(\n      this.queryHookOptions = options,\n    );\n\n    // Update this.watchQueryOptions, but only when they have changed, which\n    // allows us to depend on the referential stability of\n    // this.watchQueryOptions elsewhere.\n    const currentWatchQueryOptions = this.watchQueryOptions;\n\n    // To force this equality test to \"fail,\" thereby reliably triggering\n    // observable.reobserve, add any current WatchQueryOptions object(s) you\n    // want to be ignored to this.optionsToIgnoreOnce. A similar effect could be\n    // achieved by nullifying this.watchQueryOptions so the equality test\n    // immediately fails because currentWatchQueryOptions is null, but this way\n    // we can promise a truthy this.watchQueryOptions at all times.\n    if (\n      this.optionsToIgnoreOnce.has(currentWatchQueryOptions) ||\n      !equal(watchQueryOptions, currentWatchQueryOptions)\n    ) {\n      this.watchQueryOptions = watchQueryOptions;\n\n      if (currentWatchQueryOptions && this.observable) {\n        // As advertised in the -Once of this.optionsToIgnoreOnce, this trick is\n        // only good for one forced execution of observable.reobserve per\n        // ignored WatchQueryOptions object, though it is unlikely we will ever\n        // see this exact currentWatchQueryOptions object again here, since we\n        // just replaced this.watchQueryOptions with watchQueryOptions.\n        this.optionsToIgnoreOnce.delete(currentWatchQueryOptions);\n\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        this.observable.reobserve(this.getObsQueryOptions());\n\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        this.previousData = this.result?.data || this.previousData;\n        this.result = void 0;\n      }\n    }\n\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n\n    if (\n      (this.renderPromises || this.client.disableNetworkFetches) &&\n      this.queryHookOptions.ssr === false &&\n      !this.queryHookOptions.skip\n    ) {\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      this.result = this.ssrDisabledResult;\n    } else if (\n      this.queryHookOptions.skip ||\n      this.watchQueryOptions.fetchPolicy === 'standby'\n    ) {\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      this.result = this.skipStandbyResult;\n    } else if (\n      this.result === this.ssrDisabledResult ||\n      this.result === this.skipStandbyResult\n    ) {\n      this.result = void 0;\n    }\n  }\n\n  private getObsQueryOptions(): WatchQueryOptions<TVariables, TData> {\n    const toMerge: Array<\n      Partial<WatchQueryOptions<TVariables, TData>>\n    > = [];\n\n    const globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n\n    if (this.queryHookOptions.defaultOptions) {\n      toMerge.push(this.queryHookOptions.defaultOptions);\n    }\n\n    // We use compact rather than mergeOptions for this part of the merge,\n    // because we want watchQueryOptions.variables (if defined) to replace\n    // this.observable.options.variables whole. This replacement allows\n    // removing variables by removing them from the variables input to\n    // useQuery. If the variables were always merged together (rather than\n    // replaced), there would be no way to remove existing variables.\n    // However, the variables from options.defaultOptions and globalDefaults\n    // (if provided) should be merged, to ensure individual defaulted\n    // variables always have values, if not otherwise defined in\n    // observable.options or watchQueryOptions.\n    toMerge.push(compact(\n      this.observable && this.observable.options,\n      this.watchQueryOptions,\n    ));\n\n    return toMerge.reduce(\n      mergeOptions\n    ) as WatchQueryOptions<TVariables, TData>;\n  }\n\n  private ssrDisabledResult = maybeDeepFreeze({\n    loading: true,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.loading,\n  });\n\n  private skipStandbyResult = maybeDeepFreeze({\n    loading: false,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.ready,\n  });\n\n  // A function to massage options before passing them to ObservableQuery.\n  private createWatchQueryOptions({\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    ...otherOptions\n  }: QueryHookOptions<TData, TVariables> = {}): WatchQueryOptions<TVariables, TData> {\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    const watchQueryOptions: WatchQueryOptions<TVariables, TData> =\n      Object.assign(otherOptions, { query: this.query });\n\n    if (\n      this.renderPromises &&\n      (\n        watchQueryOptions.fetchPolicy === 'network-only' ||\n        watchQueryOptions.fetchPolicy === 'cache-and-network'\n      )\n    ) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {} as TVariables;\n    }\n\n    if (skip) {\n      const {\n        fetchPolicy = this.getDefaultFetchPolicy(),\n        initialFetchPolicy = fetchPolicy,\n      } = watchQueryOptions;\n\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy,\n        fetchPolicy: 'standby',\n      });\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy =\n        this.observable?.options.initialFetchPolicy ||\n        this.getDefaultFetchPolicy();\n    }\n\n    return watchQueryOptions;\n  }\n\n  getDefaultFetchPolicy(): WatchQueryFetchPolicy {\n    return (\n      this.queryHookOptions.defaultOptions?.fetchPolicy ||\n      this.client.defaultOptions.watchQuery?.fetchPolicy ||\n      \"cache-first\"\n    );\n  }\n\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  private onCompleted(data: TData) {}\n  private onError(error: ApolloError) {}\n\n  private observable: ObservableQuery<TData, TVariables>;\n  private obsQueryFields: Omit<\n    ObservableQueryFields<TData, TVariables>,\n    \"variables\"\n  >;\n\n  private useObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    const obsQuery = this.observable =\n      this.renderPromises\n        && this.renderPromises.getSSRObservable(this.watchQueryOptions)\n        || this.observable // Reuse this.observable if possible (and not SSR)\n        || this.client.watchQuery(this.getObsQueryOptions());\n\n    this.obsQueryFields = useMemo(() => ({\n      refetch: obsQuery.refetch.bind(obsQuery),\n      reobserve: obsQuery.reobserve.bind(obsQuery),\n      fetchMore: obsQuery.fetchMore.bind(obsQuery),\n      updateQuery: obsQuery.updateQuery.bind(obsQuery),\n      startPolling: obsQuery.startPolling.bind(obsQuery),\n      stopPolling: obsQuery.stopPolling.bind(obsQuery),\n      subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n    }), [obsQuery]);\n\n    const ssrAllowed = !(\n      this.queryHookOptions.ssr === false ||\n      this.queryHookOptions.skip\n    );\n\n    if (this.renderPromises && ssrAllowed) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n\n      if (obsQuery.getCurrentResult().loading) {\n        // TODO: This is a legacy API which could probably be cleaned up\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n\n    return obsQuery;\n  }\n\n  // These members are populated by getCurrentResult and setResult, and it's\n  // okay/normal for them to be initially undefined.\n  private result: undefined | ApolloQueryResult<TData>;\n  private previousData: undefined | TData;\n\n  private setResult(nextResult: ApolloQueryResult<TData>) {\n    const previousResult = this.result;\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n    this.result = nextResult;\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult);\n  }\n\n  private handleErrorOrCompleted(result: ApolloQueryResult<TData>) {\n    if (!result.loading) {\n      // wait a tick in case we are in the middle of rendering a component\n      Promise.resolve().then(() => {\n        if (result.error) {\n          this.onError(result.error);\n        } else if (result.data) {\n          this.onCompleted(result.data);\n        }\n      }).catch(error => {\n        invariant.warn(error);\n      });\n    }\n  }\n\n  private getCurrentResult(): ApolloQueryResult<TData> {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!this.result) {\n      this.handleErrorOrCompleted(\n        this.result = this.observable.getCurrentResult()\n      );\n    }\n    return this.result;\n  }\n\n  // This cache allows the referential stability of this.result (as returned by\n  // getCurrentResult) to translate into referential stability of the resulting\n  // QueryResult object returned by toQueryResult.\n  private toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)<\n    ApolloQueryResult<TData>,\n    QueryResult<TData, TVariables>\n  >();\n\n  toQueryResult(\n    result: ApolloQueryResult<TData>,\n  ): QueryResult<TData, TVariables> {\n    let queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n\n    const { data, partial, ...resultWithoutPartial } = result;\n    this.toQueryResultCache.set(result, queryResult = {\n      data, // Ensure always defined, even if result.data is missing.\n      ...resultWithoutPartial,\n      ...this.obsQueryFields,\n      client: this.client,\n      observable: this.observable,\n      variables: this.observable.variables,\n      called: !this.queryHookOptions.skip,\n      previousData: this.previousData,\n    });\n\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      // TODO: Is it possible for both result.error and result.errors to be\n      // defined here?\n      queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n    }\n\n    return queryResult;\n  }\n\n  private unsafeHandlePartialRefetch(result: ApolloQueryResult<TData>) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      result.partial &&\n      this.queryHookOptions.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      this.observable.options.fetchPolicy !== 'cache-only'\n    ) {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      });\n      this.observable.refetch();\n    }\n  }\n}\n","import { invariant } from '../../utilities/globals';\nimport { useContext } from 'react';\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useApolloClient(\n  override?: ApolloClient<object>,\n): ApolloClient<object> {\n  const context = useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n    'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n    'instance in via options.',\n  );\n\n  return client;\n}\n"],"names":["GetAllTestimonials","gql","home","numberOftestimonialsPerView","autoplaySpeed","Testimonial","props","testimonials","handleResize","screenWidth","window","innerWidth","SCREEN_SIZE","setState","state","this","addEventListener","removeEventListener","TestimonialSwiper","values","Component","value","swiperRef","useRef","useQuery","loading","error","data","nodes","className","slidesPerView","spaceBetween","slidesPerGroup","loop","autoplay","delay","disableOnInteraction","autoHeight","pagination","clickable","onBeforeInit","swiper","current","modules","Autoplay","Pagination","Navigation","map","item","index","dangerouslySetInnerHTML","__html","content","title","position","onClick","slidePrev","src","arrowLeft","alt","slideNext","arrowRight","didWarnUncachedGetSnapshot","useSyncExternalStore","React","subscribe","getSnapshot","getServerSnapshot","__DEV__","invariant","inst","forceUpdate","canUseLayoutEffect","Object","assign","checkIfSnapshotChanged","_a","DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","verifyDocumentType","document","operation","variables","cached","get","fragments","queries","mutations","subscriptions","definitions","_i","x","kind","push","length","definition","variableDefinitions","requiredOperationName","query","options","create","client","stateRef","InternalState","useState","setTick","tick","useInternalState","override","context","useContext","getApolloContext","useApolloClient","previous","asyncResolveFns","Set","optionsToIgnoreOnce","canUseWeakSet","WeakSet","ssrDisabledResult","maybeDeepFreeze","networkStatus","NetworkStatus","skipStandbyResult","toQueryResultCache","canUseWeakMap","WeakMap","previousResult","result","previousData","Promise","resolve","_this","add","watchQueryOptions","renderPromises","useOptions","obsQuery","useObservableQuery","useCallback","onNext","getCurrentResult","equal","setResult","subscription","onError","last","unsubscribe","resetLastResults","hasOwnProperty","call","disableNetworkFetches","unsafeHandlePartialRefetch","queryResult","toQueryResult","size","forEach","clear","createWatchQueryOptions","queryHookOptions","currentWatchQueryOptions","has","observable","delete","reobserve","getObsQueryOptions","onCompleted","prototype","ssr","skip","fetchPolicy","toMerge","globalDefaults","defaultOptions","watchQuery","compact","reduce","mergeOptions","otherOptions","getDefaultFetchPolicy","_d","initialFetchPolicy","getSSRObservable","obsQueryFields","useMemo","refetch","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","ssrAllowed","registerSSRObservable","addObservableQueryPromise","nextResult","handleErrorOrCompleted","then","catch","resultWithoutPartial","set","called","isNonEmptyArray","errors","ApolloError","graphQLErrors","partial","partialRefetch","keys"],"sourceRoot":""}