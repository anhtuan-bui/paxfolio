{"version":3,"file":"static/js/569.0a5aabb1.chunk.js","mappings":"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","sources":["assets/images/left.svg","assets/images/right.svg","components/Testimonial/Testimonial.jsx","../node_modules/@apollo/src/react/hooks/useSyncExternalStore.ts","../node_modules/@apollo/src/react/parser/index.ts","../node_modules/@apollo/src/react/hooks/useQuery.ts","../node_modules/@apollo/src/react/hooks/useApolloClient.ts"],"sourcesContent":["var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgLeft(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 10,\n    height: 18,\n    viewBox: \"0 0 10 18\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9 1.5L1.5 9L9 16.5\",\n    stroke: \"#0A61B4\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgLeft);\nexport default __webpack_public_path__ + \"static/media/left.482b7a8cfb145445f061ba6fd0059559.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgRight(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 10,\n    height: 18,\n    viewBox: \"0 0 10 18\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 1.5L8.5 9L1 16.5\",\n    stroke: \"#0A61B4\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgRight);\nexport default __webpack_public_path__ + \"static/media/right.860f22fa1256bcd17b01333cd0b9705b.svg\";\nexport { ForwardRef as ReactComponent };","import React, { Component, useRef } from \"react\";\nimport \"./Testimonial.scss\";\n\nimport arrowLeft from \"../../assets/images/left.svg\";\nimport arrowRight from \"../../assets/images/right.svg\";\n\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport { Autoplay, Pagination, Navigation } from \"swiper\";\nimport { SCREEN_SIZE } from \"../../configurations/configurations\";\n\n// Import Swiper styles\nimport \"swiper/scss\";\nimport \"swiper/scss/pagination\";\nimport \"swiper/scss/navigation\";\n\nimport { gql, useQuery } from \"@apollo/client\";\n\nconst GetAllTestimonials = gql`\n  query GetAllTestimonials {\n    testimonials {\n      nodes {\n        title\n        content\n        position\n      }\n    }\n  }\n`;\n\nvar home = {\n  numberOftestimonialsPerView: 3,\n  autoplaySpeed: 4000,\n};\n\nexport default class Testimonial extends Component {\n  testimonials = [];\n\n  constructor(props) {\n    super(props);\n\n    this.state = null;\n  }\n\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener(\"resize\", this.handleResize);\n\n    this.setState(this.testimonials);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize = () => {\n    const screenWidth = window.innerWidth;\n    if (screenWidth >= SCREEN_SIZE.large) {\n      home = {\n        numberOftestimonialsPerView: 3,\n      };\n    } else if (\n      screenWidth < SCREEN_SIZE.large &&\n      screenWidth >= SCREEN_SIZE.medium\n    ) {\n      home = {\n        numberOftestimonialsPerView: 2,\n      };\n    } else if (\n      screenWidth < SCREEN_SIZE.medium &&\n      screenWidth >= SCREEN_SIZE.small\n    ) {\n      home = {\n        numberOftestimonialsPerView: 2,\n      };\n    } else if (screenWidth < SCREEN_SIZE.small) {\n      home = {\n        numberOftestimonialsPerView: 1,\n      };\n    }\n    this.setState(home);\n  };\n\n  render() {\n    return <TestimonialSwiper values={this.testimonials} />;\n  }\n}\n\nconst TestimonialSwiper = (value) => {\n  const swiperRef = useRef();\n\n  const { loading, error, data } = useQuery(GetAllTestimonials);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>\n  }\n  const testimonials = data.testimonials.nodes;\n\n  return (\n    <div className=\"container\">\n      <div className=\"testimonial__container\">\n        <p className=\"testimonial__name section_name\">TESTIMONIAL</p>\n        <h2 className=\"testimonial__title\">\n          What people are saying about Paxform\n        </h2>\n        <div className=\"testimonial__swiper\">\n          <Swiper\n            slidesPerView={home.numberOftestimonialsPerView}\n            spaceBetween={24}\n            slidesPerGroup={home.numberOftestimonialsPerView}\n            loop={true}\n            autoplay={{\n              delay: 4000,\n              disableOnInteraction: false,\n            }}\n            autoHeight={false}\n            pagination={{\n              clickable: true,\n            }}\n            onBeforeInit={(swiper) => {\n              swiperRef.current = swiper;\n            }}\n            modules={[Autoplay, Pagination, Navigation]}\n            className=\"testimonial__slider\"\n          >\n            {testimonials.map((item, index) => {\n              return (\n                <SwiperSlide key={index}>\n                  <div className=\"testimonial_card\">\n                    <div\n                      className=\"testimonial_card__description\"\n                      dangerouslySetInnerHTML={{\n                        __html: item.content,\n                      }}\n                    ></div>\n                    <div className=\"testimonial_card__name-box\">\n                      <h3 className=\"testimonial_card__name\">\n                        {item.title}\n                      </h3>\n                      <p className=\"testimonial_card__position\">\n                        {item.position}\n                      </p>\n                    </div>\n                  </div>\n                </SwiperSlide>\n              );\n            })}\n          </Swiper>\n          <div className=\"slider__buttons--left\">\n            <button onClick={() => swiperRef.current?.slidePrev()}>\n              <img src={arrowLeft} alt=\"arrow left\" />\n            </button>\n          </div>\n          <div className=\"slider__buttons--right\">\n            <button onClick={() => swiperRef.current?.slideNext()}>\n              <img src={arrowRight} alt=\"arrow right\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { invariant } from '../../utilities/globals';\nimport * as React from 'react';\n\nimport { canUseLayoutEffect } from '../../utilities';\n\nlet didWarnUncachedGetSnapshot = false;\n\ntype RealUseSESHookType =\n  // This import depends only on the @types/use-sync-external-store package, not\n  // the actual use-sync-external-store package, which is not installed. It\n  // might be nice to get this type from React 18, but it still needs to work\n  // when only React 17 or earlier is installed.\n  typeof import(\"use-sync-external-store\").useSyncExternalStore;\n\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nconst uSESKey = \"useSyncExternalStore\" as keyof typeof React;\nconst realHook = React[uSESKey] as RealUseSESHookType | undefined;\n\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nexport const useSyncExternalStore: RealUseSESHookType = realHook || ((\n  subscribe,\n  getSnapshot,\n  getServerSnapshot,\n) => {\n  // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n  const value = getSnapshot();\n  if (\n    // DEVIATION: Using our own __DEV__ polyfill (from ../../utilities/globals).\n    __DEV__ &&\n    !didWarnUncachedGetSnapshot &&\n    // DEVIATION: Not using Object.is because we know our snapshots will never\n    // be exotic primitive values like NaN, which is !== itself.\n    value !== getSnapshot()\n  ) {\n    didWarnUncachedGetSnapshot = true;\n    // DEVIATION: Using invariant.error instead of console.error directly.\n    invariant.error(\n      'The result of getSnapshot should be cached to avoid an infinite loop',\n    );\n  }\n\n  // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n  const [{inst}, forceUpdate] = React.useState({inst: {value, getSnapshot}});\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  if (canUseLayoutEffect) {\n    // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n    // which may seem like a conditional hook, but this code ends up behaving\n    // unconditionally (one way or the other) because canUseLayoutEffect is\n    // constant.\n    React.useLayoutEffect(() => {\n      Object.assign(inst, { value, getSnapshot });\n      // Whenever getSnapshot or subscribe changes, we need to check in the\n      // commit phase if there was an interleaved mutation. In concurrent mode\n      // this can happen all the time, but even in synchronous mode, an earlier\n      // effect may have mutated the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({inst});\n      }\n    }, [subscribe, value, getSnapshot]);\n  } else {\n    Object.assign(inst, { value, getSnapshot });\n  }\n\n  React.useEffect(() => {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({inst});\n    }\n\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(function handleStoreChange() {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({inst});\n      }\n    });\n  }, [subscribe]);\n\n  return value;\n});\n\nfunction checkIfSnapshotChanged<Snapshot>({\n  value,\n  getSnapshot,\n}: {\n  value: Snapshot;\n  getSnapshot: () => Snapshot;\n}): boolean {\n  try {\n    return value !== getSnapshot();\n  } catch {\n    return true;\n  }\n}\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments: DefinitionNode[] = []\n  const queries: DefinitionNode[] = []\n  const mutations: DefinitionNode[] = []\n  const subscriptions: DefinitionNode[] = []\n\n  for (const x of document.definitions) {\n    if (x.kind === 'FragmentDefinition') {\n      fragments.push(x);\n      continue\n    }\n\n    if (x.kind === 'OperationDefinition') {\n      switch (x.operation) {\n        case 'query':\n          queries.push(x);\n          break;\n        case 'mutation':\n          mutations.push(x);\n          break;\n        case 'subscription':\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  useCallback,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useSyncExternalStore } from './useSyncExternalStore';\nimport { equal } from '@wry/equality';\n\nimport { mergeOptions, OperationVariables, WatchQueryFetchPolicy } from '../../core';\nimport { ApolloContextValue, getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloClient,\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n  ObservableQueryFields,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\nimport { canUseWeakMap, canUseWeakSet, compact, isNonEmptyArray, maybeDeepFreeze } from '../../utilities';\n\nconst {\n  prototype: {\n    hasOwnProperty,\n  },\n} = Object;\n\nexport function useQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = Object.create(null),\n): QueryResult<TData, TVariables> {\n  return useInternalState(\n    useApolloClient(options.client),\n    query,\n  ).useQuery(options);\n}\n\nexport function useInternalState<TData, TVariables extends OperationVariables>(\n  client: ApolloClient<any>,\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n): InternalState<TData, TVariables> {\n  const stateRef = useRef<InternalState<TData, TVariables>>();\n  if (\n    !stateRef.current ||\n    client !== stateRef.current.client ||\n    query !== stateRef.current.query\n  ) {\n    stateRef.current = new InternalState(client, query, stateRef.current);\n  }\n  const state = stateRef.current;\n\n  // By default, InternalState.prototype.forceUpdate is an empty function, but\n  // we replace it here (before anyone has had a chance to see this state yet)\n  // with a function that unconditionally forces an update, using the latest\n  // setTick function. Updating this state by calling state.forceUpdate is the\n  // only way we trigger React component updates (no other useState calls within\n  // the InternalState class).\n  const [_tick, setTick] = useState(0);\n  state.forceUpdate = () => {\n    setTick(tick => tick + 1);\n  };\n\n  return state;\n}\n\nclass InternalState<TData, TVariables extends OperationVariables> {\n  constructor(\n    public readonly client: ReturnType<typeof useApolloClient>,\n    public readonly query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    previous?: InternalState<TData, TVariables>,\n  ) {\n    verifyDocumentType(query, DocumentType.Query);\n\n    // Reuse previousData from previous InternalState (if any) to provide\n    // continuity of previousData even if/when the query or client changes.\n    const previousResult = previous && previous.result;\n    const previousData = previousResult && previousResult.data;\n    if (previousData) {\n      this.previousData = previousData;\n    }\n  }\n\n  forceUpdate() {\n    // Replaced (in useInternalState) with a method that triggers an update.\n    invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n  }\n\n  asyncUpdate(signal: AbortSignal) {\n    return new Promise<QueryResult<TData, TVariables>>((resolve, reject) => {\n      const watchQueryOptions = this.watchQueryOptions;\n\n      const handleAborted = () => {\n        this.asyncResolveFns.delete(resolve)\n        this.optionsToIgnoreOnce.delete(watchQueryOptions);\n        signal.removeEventListener('abort', handleAborted)\n        reject(signal.reason);\n      };\n\n      this.asyncResolveFns.add(resolve);\n      this.optionsToIgnoreOnce.add(watchQueryOptions);\n      signal.addEventListener('abort', handleAborted)\n      this.forceUpdate();\n    });\n  }\n\n  private asyncResolveFns = new Set<\n    (result: QueryResult<TData, TVariables>) => void\n  >();\n\n  private optionsToIgnoreOnce = new (canUseWeakSet ? WeakSet : Set)<\n    WatchQueryOptions<TVariables, TData>\n  >();\n\n  // Methods beginning with use- should be called according to the standard\n  // rules of React hooks: only at the top level of the calling function, and\n  // without any dynamic conditional logic.\n  useQuery(options: QueryHookOptions<TData, TVariables>) {\n    // The renderPromises field gets initialized here in the useQuery method, at\n    // the beginning of everything (for a given component rendering, at least),\n    // so we can safely use this.renderPromises in other/later InternalState\n    // methods without worrying it might be uninitialized. Even after\n    // initialization, this.renderPromises is usually undefined (unless SSR is\n    // happening), but that's fine as long as it has been initialized that way,\n    // rather than left uninitialized.\n    this.renderPromises = useContext(getApolloContext()).renderPromises;\n\n    this.useOptions(options);\n\n    const obsQuery = this.useObservableQuery();\n\n    const result = useSyncExternalStore(\n      useCallback(() => {\n        if (this.renderPromises) {\n          return () => {};\n        }\n\n        const onNext = () => {\n          const previousResult = this.result;\n          // We use `getCurrentResult()` instead of the onNext argument because\n          // the values differ slightly. Specifically, loading results will have\n          // an empty object for data instead of `undefined` for some reason.\n          const result = obsQuery.getCurrentResult();\n          // Make sure we're not attempting to re-render similar results\n          if (\n            previousResult &&\n            previousResult.loading === result.loading &&\n            previousResult.networkStatus === result.networkStatus &&\n            equal(previousResult.data, result.data)\n          ) {\n            return;\n          }\n\n          this.setResult(result);\n        };\n\n        const onError = (error: Error) => {\n          const last = obsQuery[\"last\"];\n          subscription.unsubscribe();\n          // Unfortunately, if `lastError` is set in the current\n          // `observableQuery` when the subscription is re-created,\n          // the subscription will immediately receive the error, which will\n          // cause it to terminate again. To avoid this, we first clear\n          // the last error/result from the `observableQuery` before re-starting\n          // the subscription, and restore it afterwards (so the subscription\n          // has a chance to stay open).\n          try {\n            obsQuery.resetLastResults();\n            subscription = obsQuery.subscribe(onNext, onError);\n          } finally {\n            obsQuery[\"last\"] = last;\n          }\n\n          if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n            // The error is not a GraphQL error\n            throw error;\n          }\n\n          const previousResult = this.result;\n          if (\n            !previousResult ||\n            (previousResult && previousResult.loading) ||\n            !equal(error, previousResult.error)\n          ) {\n            this.setResult({\n              data: (previousResult && previousResult.data) as TData,\n              error: error as ApolloError,\n              loading: false,\n              networkStatus: NetworkStatus.error,\n            });\n          }\n        };\n\n        let subscription = obsQuery.subscribe(onNext, onError);\n\n        return () => subscription.unsubscribe();\n      }, [\n        // We memoize the subscribe function using useCallback and the following\n        // dependency keys, because the subscribe function reference is all that\n        // useSyncExternalStore uses internally as a dependency key for the\n        // useEffect ultimately responsible for the subscription, so we are\n        // effectively passing this dependency array to that useEffect buried\n        // inside useSyncExternalStore, as desired.\n        obsQuery,\n        this.renderPromises,\n        this.client.disableNetworkFetches,\n      ]),\n\n      () => this.getCurrentResult(),\n      () => this.getCurrentResult(),\n    );\n\n    // TODO Remove this method when we remove support for options.partialRefetch.\n    this.unsafeHandlePartialRefetch(result);\n\n    const queryResult = this.toQueryResult(result);\n\n    if (!queryResult.loading && this.asyncResolveFns.size) {\n      this.asyncResolveFns.forEach(resolve => resolve(queryResult));\n      this.asyncResolveFns.clear();\n    }\n\n    return queryResult;\n  }\n\n  // These members (except for renderPromises) are all populated by the\n  // useOptions method, which is called unconditionally at the beginning of the\n  // useQuery method, so we can safely use these members in other/later methods\n  // without worrying they might be uninitialized.\n  private renderPromises: ApolloContextValue[\"renderPromises\"];\n  private queryHookOptions: QueryHookOptions<TData, TVariables>;\n  private watchQueryOptions: WatchQueryOptions<TVariables, TData>;\n\n  private useOptions(\n    options: QueryHookOptions<TData, TVariables>,\n  ) {\n    const watchQueryOptions = this.createWatchQueryOptions(\n      this.queryHookOptions = options,\n    );\n\n    // Update this.watchQueryOptions, but only when they have changed, which\n    // allows us to depend on the referential stability of\n    // this.watchQueryOptions elsewhere.\n    const currentWatchQueryOptions = this.watchQueryOptions;\n\n    // To force this equality test to \"fail,\" thereby reliably triggering\n    // observable.reobserve, add any current WatchQueryOptions object(s) you\n    // want to be ignored to this.optionsToIgnoreOnce. A similar effect could be\n    // achieved by nullifying this.watchQueryOptions so the equality test\n    // immediately fails because currentWatchQueryOptions is null, but this way\n    // we can promise a truthy this.watchQueryOptions at all times.\n    if (\n      this.optionsToIgnoreOnce.has(currentWatchQueryOptions) ||\n      !equal(watchQueryOptions, currentWatchQueryOptions)\n    ) {\n      this.watchQueryOptions = watchQueryOptions;\n\n      if (currentWatchQueryOptions && this.observable) {\n        // As advertised in the -Once of this.optionsToIgnoreOnce, this trick is\n        // only good for one forced execution of observable.reobserve per\n        // ignored WatchQueryOptions object, though it is unlikely we will ever\n        // see this exact currentWatchQueryOptions object again here, since we\n        // just replaced this.watchQueryOptions with watchQueryOptions.\n        this.optionsToIgnoreOnce.delete(currentWatchQueryOptions);\n\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        this.observable.reobserve(this.getObsQueryOptions());\n\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        this.previousData = this.result?.data || this.previousData;\n        this.result = void 0;\n      }\n    }\n\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n\n    if (\n      (this.renderPromises || this.client.disableNetworkFetches) &&\n      this.queryHookOptions.ssr === false &&\n      !this.queryHookOptions.skip\n    ) {\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      this.result = this.ssrDisabledResult;\n    } else if (\n      this.queryHookOptions.skip ||\n      this.watchQueryOptions.fetchPolicy === 'standby'\n    ) {\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      this.result = this.skipStandbyResult;\n    } else if (\n      this.result === this.ssrDisabledResult ||\n      this.result === this.skipStandbyResult\n    ) {\n      this.result = void 0;\n    }\n  }\n\n  private getObsQueryOptions(): WatchQueryOptions<TVariables, TData> {\n    const toMerge: Array<\n      Partial<WatchQueryOptions<TVariables, TData>>\n    > = [];\n\n    const globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n\n    if (this.queryHookOptions.defaultOptions) {\n      toMerge.push(this.queryHookOptions.defaultOptions);\n    }\n\n    // We use compact rather than mergeOptions for this part of the merge,\n    // because we want watchQueryOptions.variables (if defined) to replace\n    // this.observable.options.variables whole. This replacement allows\n    // removing variables by removing them from the variables input to\n    // useQuery. If the variables were always merged together (rather than\n    // replaced), there would be no way to remove existing variables.\n    // However, the variables from options.defaultOptions and globalDefaults\n    // (if provided) should be merged, to ensure individual defaulted\n    // variables always have values, if not otherwise defined in\n    // observable.options or watchQueryOptions.\n    toMerge.push(compact(\n      this.observable && this.observable.options,\n      this.watchQueryOptions,\n    ));\n\n    return toMerge.reduce(\n      mergeOptions\n    ) as WatchQueryOptions<TVariables, TData>;\n  }\n\n  private ssrDisabledResult = maybeDeepFreeze({\n    loading: true,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.loading,\n  });\n\n  private skipStandbyResult = maybeDeepFreeze({\n    loading: false,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.ready,\n  });\n\n  // A function to massage options before passing them to ObservableQuery.\n  private createWatchQueryOptions({\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    ...otherOptions\n  }: QueryHookOptions<TData, TVariables> = {}): WatchQueryOptions<TVariables, TData> {\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    const watchQueryOptions: WatchQueryOptions<TVariables, TData> =\n      Object.assign(otherOptions, { query: this.query });\n\n    if (\n      this.renderPromises &&\n      (\n        watchQueryOptions.fetchPolicy === 'network-only' ||\n        watchQueryOptions.fetchPolicy === 'cache-and-network'\n      )\n    ) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {} as TVariables;\n    }\n\n    if (skip) {\n      const {\n        fetchPolicy = this.getDefaultFetchPolicy(),\n        initialFetchPolicy = fetchPolicy,\n      } = watchQueryOptions;\n\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy,\n        fetchPolicy: 'standby',\n      });\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy =\n        this.observable?.options.initialFetchPolicy ||\n        this.getDefaultFetchPolicy();\n    }\n\n    return watchQueryOptions;\n  }\n\n  getDefaultFetchPolicy(): WatchQueryFetchPolicy {\n    return (\n      this.queryHookOptions.defaultOptions?.fetchPolicy ||\n      this.client.defaultOptions.watchQuery?.fetchPolicy ||\n      \"cache-first\"\n    );\n  }\n\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  private onCompleted(data: TData) {}\n  private onError(error: ApolloError) {}\n\n  private observable: ObservableQuery<TData, TVariables>;\n  private obsQueryFields: Omit<\n    ObservableQueryFields<TData, TVariables>,\n    \"variables\"\n  >;\n\n  private useObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    const obsQuery = this.observable =\n      this.renderPromises\n        && this.renderPromises.getSSRObservable(this.watchQueryOptions)\n        || this.observable // Reuse this.observable if possible (and not SSR)\n        || this.client.watchQuery(this.getObsQueryOptions());\n\n    this.obsQueryFields = useMemo(() => ({\n      refetch: obsQuery.refetch.bind(obsQuery),\n      reobserve: obsQuery.reobserve.bind(obsQuery),\n      fetchMore: obsQuery.fetchMore.bind(obsQuery),\n      updateQuery: obsQuery.updateQuery.bind(obsQuery),\n      startPolling: obsQuery.startPolling.bind(obsQuery),\n      stopPolling: obsQuery.stopPolling.bind(obsQuery),\n      subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n    }), [obsQuery]);\n\n    const ssrAllowed = !(\n      this.queryHookOptions.ssr === false ||\n      this.queryHookOptions.skip\n    );\n\n    if (this.renderPromises && ssrAllowed) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n\n      if (obsQuery.getCurrentResult().loading) {\n        // TODO: This is a legacy API which could probably be cleaned up\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n\n    return obsQuery;\n  }\n\n  // These members are populated by getCurrentResult and setResult, and it's\n  // okay/normal for them to be initially undefined.\n  private result: undefined | ApolloQueryResult<TData>;\n  private previousData: undefined | TData;\n\n  private setResult(nextResult: ApolloQueryResult<TData>) {\n    const previousResult = this.result;\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n    this.result = nextResult;\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult);\n  }\n\n  private handleErrorOrCompleted(result: ApolloQueryResult<TData>) {\n    if (!result.loading) {\n      const error = this.toApolloError(result);\n\n      // wait a tick in case we are in the middle of rendering a component\n      Promise.resolve().then(() => {\n        if (error) {\n          this.onError(error);\n        } else if (result.data) {\n          this.onCompleted(result.data);\n        }\n      }).catch(error => {\n        invariant.warn(error);\n      });\n    }\n  }\n\n  private toApolloError(result: ApolloQueryResult<TData>): ApolloError | undefined {\n    return isNonEmptyArray(result.errors)\n      ? new ApolloError({ graphQLErrors: result.errors })\n      : result.error\n  }\n\n  private getCurrentResult(): ApolloQueryResult<TData> {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!this.result) {\n      this.handleErrorOrCompleted(\n        this.result = this.observable.getCurrentResult()\n      );\n    }\n    return this.result;\n  }\n\n  // This cache allows the referential stability of this.result (as returned by\n  // getCurrentResult) to translate into referential stability of the resulting\n  // QueryResult object returned by toQueryResult.\n  private toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)<\n    ApolloQueryResult<TData>,\n    QueryResult<TData, TVariables>\n  >();\n\n  toQueryResult(\n    result: ApolloQueryResult<TData>,\n  ): QueryResult<TData, TVariables> {\n    let queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n\n    const { data, partial, ...resultWithoutPartial } = result;\n    this.toQueryResultCache.set(result, queryResult = {\n      data, // Ensure always defined, even if result.data is missing.\n      ...resultWithoutPartial,\n      ...this.obsQueryFields,\n      client: this.client,\n      observable: this.observable,\n      variables: this.observable.variables,\n      called: !this.queryHookOptions.skip,\n      previousData: this.previousData,\n    });\n\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      // TODO: Is it possible for both result.error and result.errors to be\n      // defined here?\n      queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n    }\n\n    return queryResult;\n  }\n\n  private unsafeHandlePartialRefetch(result: ApolloQueryResult<TData>) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      result.partial &&\n      this.queryHookOptions.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      this.observable.options.fetchPolicy !== 'cache-only'\n    ) {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      });\n      this.observable.refetch();\n    }\n  }\n}\n","import { invariant } from '../../utilities/globals';\nimport { useContext } from 'react';\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useApolloClient(\n  override?: ApolloClient<object>,\n): ApolloClient<object> {\n  const context = useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n    'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n    'instance in via options.',\n  );\n\n  return client;\n}\n"],"names":["GetAllTestimonials","gql","_templateObject","_taggedTemplateLiteral","home","numberOftestimonialsPerView","autoplaySpeed","Testimonial","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","testimonials","handleResize","screenWidth","window","innerWidth","SCREEN_SIZE","setState","state","_createClass","key","value","this","addEventListener","removeEventListener","_jsx","TestimonialSwiper","values","Component","swiperRef","useRef","_useQuery","useQuery","loading","error","data","children","_jsxs","nodes","className","Swiper","slidesPerView","spaceBetween","slidesPerGroup","loop","autoplay","delay","disableOnInteraction","autoHeight","pagination","clickable","onBeforeInit","swiper","current","modules","Autoplay","Pagination","Navigation","map","item","index","SwiperSlide","dangerouslySetInnerHTML","__html","content","title","position","onClick","_swiperRef$current","slidePrev","src","arrowLeft","alt","_swiperRef$current2","slideNext","arrowRight","didWarnUncachedGetSnapshot","useSyncExternalStore","React","subscribe","getSnapshot","getServerSnapshot","__DEV__","invariant","_a","inst","forceUpdate","canUseLayoutEffect","Object","assign","checkIfSnapshotChanged","_b","DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","verifyDocumentType","document","operation","variables","cached","get","kind","concat","fragments","queries","mutations","subscriptions","_i","definitions","length","x","push","definition","variableDefinitions","payload","set","parser","requiredOperationName","usedOperationName","hasOwnProperty","prototype","query","options","create","client","stateRef","InternalState","useState","setTick","tick","useInternalState","override","context","useContext","getApolloContext","useApolloClient","previous","asyncResolveFns","Set","optionsToIgnoreOnce","canUseWeakSet","WeakSet","ssrDisabledResult","maybeDeepFreeze","networkStatus","NetworkStatus","skipStandbyResult","toQueryResultCache","canUseWeakMap","WeakMap","previousResult","result","previousData","asyncUpdate","signal","Promise","resolve","reject","watchQueryOptions","add","handleAborted","delete","reason","renderPromises","useOptions","obsQuery","useObservableQuery","useCallback","onNext","getCurrentResult","equal","setResult","subscription","onError","last","unsubscribe","resetLastResults","disableNetworkFetches","unsafeHandlePartialRefetch","queryResult","toQueryResult","size","forEach","clear","createWatchQueryOptions","queryHookOptions","currentWatchQueryOptions","has","observable","reobserve","getObsQueryOptions","onCompleted","ssr","skip","fetchPolicy","toMerge","globalDefaults","defaultOptions","watchQuery","compact","reduce","mergeOptions","otherOptions","__rest","_c","getDefaultFetchPolicy","_d","initialFetchPolicy","getSSRObservable","obsQueryFields","useMemo","refetch","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","ssrAllowed","registerSSRObservable","addObservableQueryPromise","nextResult","handleErrorOrCompleted","error_1","toApolloError","then","catch","isNonEmptyArray","errors","ApolloError","graphQLErrors","resultWithoutPartial","partial","__assign","called","partialRefetch","keys"],"sourceRoot":""}